<?php

namespace App\Http\Controllers;

use App\Models\Blog;
use App\Models\Banner;
use App\Models\BatchProgramme;
use App\Models\Feature;
use App\Models\Marquee;
use App\Models\StudyMaterialCategory;
use App\Models\MainTopic;
use App\Models\TestSeriesDetail;
use App\Models\ProgrammeFeature;
use App\Models\PopUp;
use App\Models\CourseTopic;
use App\Models\CallBack;
use App\Models\Career;
use App\Models\Category;
use App\Models\Chapter;
use App\Models\PyqContent;
use App\Models\FeedTestimonial;
use App\Models\ContactUs;
use App\Models\Course;
use App\Models\CurrentAffair;
use App\Models\DailyBooster;
use App\Models\DirectEnquiry;
use App\Models\ExaminationCommission;
use App\Models\HeaderSetting;
use App\Models\SocialMedia;
use App\Models\Faq;
use App\Models\Page;
use App\Models\Question;
use App\Models\QuestionBank;
use App\Models\SEO;
use App\Models\StudyMaterial;
use App\Models\SubCategory;
use App\Models\Subject;
use PhpOffice\PhpWord\PhpWord;
use PhpOffice\PhpWord\Settings;
use App\Models\Team;
use App\Models\TestPlanner;
use App\Models\TestSeries;
use App\Models\Topic;
use App\Models\UpcomingExam;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;
use App\Imports\QuestionsImport;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\DB;
use Illuminate\Validation\Rule;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;
use PHPHtmlParser\Dom;
use Illuminate\Support\Arr;
use Maatwebsite\Excel\Concerns\Importable;
use Maatwebsite\Excel\HeadingRowImport;
use Yajra\DataTables\Facades\DataTables;


class ContentManagementController extends Controller
{
    public function aboutUs(){
        $data['about'] = Page::first();
        $data['faqs'] = Faq::all();
        return view('content-management.about',$data);
    }
    public function aboutStore(Request $request){
        $request->validate([
            'heading1' => 'required|string|max:255',
            'description1' => 'required|string',
            'youtube_url' => 'nullable|url',
            'image1' => 'nullable|image|mimes:jpeg,png,jpg,gif,svg,webp|max:2048',
        ]);
    
        $data = $request->only(['heading1', 'description1', 'youtube_url']);
    
        if ($request->hasFile('image1')) {
            $imagePath = $request->file('image1')->store('images', 'public');
            $data['image1'] = $imagePath;
        }
        Page::updateOrCreate(
            ['id' => 1], // Condition to match existing record
            $data
        );
        return redirect()->route('cm.about')->with('success', 'About us updated successfully!');
        
    }
    public function termAndCondition(){
        $data['term'] = Page::skip(1)->first();
        return view('content-management.term-and-condition',$data);
    }

    public function termStore(Request $request){
        $request->validate([
            'heading1' => 'required|string|max:255',
            'description1' => 'required|string',
        ]);
    
        $data = $request->only(['heading1', 'description1']);
        Page::updateOrCreate(
            ['id' => 2], // Condition to match existing record
            $data
        );
        return redirect()->route('cm.term.condition')->with('success', 'Term and Conditions updated successfully!');
    }

    public function privacyPolicies(){
        $data['privacy'] = Page::skip(2)->first();
        return view('content-management.privacy-policies',$data);
    }

    public function privacyStore(Request $request){
        $request->validate([
            'heading1' => 'required|string|max:255',
            'description1' => 'required|string',
        ]);
    
        $data = $request->only(['heading1', 'description1']);
        Page::updateOrCreate(
            ['id' => 3], // Condition to match existing record
            $data
        );
        return redirect()->route('cm.privacy.policy')->with('success', 'Privacy Policy updated successfully!');
    }
    public function refundCancellation(){
        $data['refund'] = Page::skip(3)->first();
        return view('content-management.refund-cancellation',$data);
    }

    public function refundCancellationStore(Request $request){
        $request->validate([
            'heading1' => 'required|string|max:255',
            'description1' => 'required|string',
        ]);
    
        $data = $request->only(['heading1', 'description1']);
        Page::updateOrCreate(
            ['id' => 4], // Condition to match existing record
            $data
        );
        return redirect()->route('cm.refund.cancellation')->with('success', 'Refunds and Cancellation Policy updated successfully!');
    }
    public function cookiesPolicies(){
        $data['cookies'] = Page::skip(4)->first();
        return view('content-management.cookies-policies',$data);
    }
    public function cookiesPolicyStore(Request $request){
        $request->validate([
            'heading1' => 'required|string|max:255',
            'description1' => 'required|string',
        ]);
    
        $data = $request->only(['heading1', 'description1']);
        Page::updateOrCreate(
            ['id' => 5], // Condition to match existing record
            $data
        );
        return redirect()->route('cm.cookies.policies')->with('success', 'Cookies Policy updated successfully!');
    }
    public function career(Request $request){
        if ($request->ajax()) {
            $data = Career::orderBy('created_at','DESC')->get();
            return Datatables::of($data)
                ->addIndexColumn()
                ->addColumn('checkbox', function ($row) {
                    return '<input type="checkbox" class="column_checkbox career_checkbox" id="'.$row->id.'" name="career_checkbox[]" />';
                })
                ->addColumn('created_at', function ($row) {
                    return $row->created_at;
                })
                ->addColumn('cv', function ($row) {
                    $linkUrl = asset("storage/" . $row->cv);
                    $link = '<a href="'.$linkUrl.'" class="btn btn-primary" download>Download</a>';
                    return $link;
                })
                ->addColumn('action', function ($row) {
                  $actionBtn = '<form action="'.route('cm.career.delete', $row->id).'" method="POST" style="display:inline">
                                '.csrf_field().'
                                '.method_field("DELETE").'
                                <button type="submit" class="btn btn-sm btn-danger"><i class="fa fa-trash"></i></button>
                            </form>';
                  return $actionBtn;
                })
                ->rawColumns(['checkbox', 'created_at', 'cv', 'action'])
                ->make(true);
        }
        return view('content-management.career');
    //}
        //$data['careers'] = Career::orderBy('created_at','DESC')->get();
        //return view('content-management.career',$data);
    }
    public function careerDelete($id){
        $career = Career::findOrFail($id);
        $career->delete();
        return redirect()->route('cm.career')->with('success', 'Career deleted successfully!');
    }
    public function blogArticles(){
        $data['blogs'] = Blog::all();
        return view('content-management.blog-articles',$data);
    }
    public function blogStore(Request $request){
        $request->validate([
            'heading' => 'required|string|max:255',
            'short_description' => 'nullable|string|max:255',
            'description' => 'required|string',
            'type' => 'nullable|string|max:255',
            'image' => 'required|image|mimes:jpeg,png,jpg,gif,svg,webp|max:2048',
            'thumbnail' => 'nullable|image|mimes:jpeg,png,jpg,gif,svg,webp|max:2048',
        ]);

        $data = $request->all();
        $data['user_id'] = Auth::id();

        if ($request->hasFile('image')) {
            $data['image'] = $request->file('image')->store('images', 'public');
        }

        if ($request->hasFile('thumbnail')) {
            $data['thumbnail'] = $request->file('thumbnail')->store('thumbnails', 'public');
        }

        Blog::create($data);

        return redirect()->route('cm.blog.articles')->with('success', 'Blog created successfully!');
    }
    public function blogDelete($id){
        $blog = Blog::findOrFail($id);
        $blog->delete();
        return redirect()->route('cm.blog.articles')->with('success', 'Blog deleted successfully!');
    }
    public function ourTeam(){
        $data['teams'] = Team::orderBy('created_at','DESC')->get();
        return view('content-management.our-team',$data);
    }

    public function ourTeamStore(Request $request){
        $request->validate([
            'name' => 'required|string|max:255',
            'designation' => 'required|string|max:255',
            'experience' => 'nullable|string',
            'education' => 'nullable|string|max:255',
            'profile_image' => 'required|image|mimes:jpeg,png,jpg,gif,svg,webp|max:2048',
        ]);

        $data = $request->all();

        if ($request->hasFile('profile_image')) {
            $data['profile_image'] = $request->file('profile_image')->store('profiles', 'public');
        }

        Team::create($data);

        return redirect()->back()->with('success', 'Team Member created successfully!');

    }
    
    public function ourTeamDelete($id){
        $team = Team::findOrFail($id);
        $team->delete();
        return redirect()->back()->with('success', 'Team Member deleted successfully!');
    }
    
    public function ourTeamEdit($id){
        $data['team'] = Team::findOrFail($id);
        return view('content-management.ajax.edit-team',$data);
    }
    
    public function ourTeamUpdate(Request $request){
        $team = Team::findOrFail($request->id);

        // Update the team member's details
        $team->name = $request->name;
        $team->designation = $request->designation;
        $team->experience = $request->experience;
        $team->education = $request->education;
    
        // Handle the file upload
        if ($request->hasFile('profile_image')) {
            // Delete the old profile image if exists
            if ($team->profile_image) {
                Storage::delete('public/profiles/' . $team->profile_image);
            }
    
            // Store the new profile image
            $imagePath = $request->file('profile_image')->store('profiles', 'public');
            $team->profile_image = $imagePath;
        }
    
        // Save the updates
        $team->save();
    
        // Redirect back with a success message
        return redirect()->route('cm.our.team')->with('success', 'Team member updated successfully!');
    }
    public function visionMission(){
        $data['vision']  = Page::skip(5)->first();
        return view('content-management.vision-mission',$data);
    }
    public function visionStore(Request $request){
        $request->validate([
            'heading1' => 'required|string|max:255',
            'heading2' => 'required|string|max:255',
            'description1' => 'required|string',
            'description2' => 'required|string',
            'image1' => 'nullable|image|mimes:jpeg,png,jpg,gif,svg,webp|max:2048',
            'image2' => 'nullable|image|mimes:jpeg,png,jpg,gif,svg,webp|max:2048',
        ]);
        $data = $request->only(['heading1', 'description1', 'heading2', 'description2']);
    
        if ($request->hasFile('image1')) {
            $imagePath1 = $request->file('image1')->store('images', 'public');
            $data['image1'] = $imagePath1;
        }

        if ($request->hasFile('image2')) {
            $imagePath2 = $request->file('image2')->store('images', 'public');
            $data['image2'] = $imagePath2;
        }
        Page::updateOrCreate(
            ['id' => 6], // Condition to match existing record
            $data
        );
        return redirect()->route('cm.vision.mission')->with('success', 'Vision and Mission updated successfully!');
    }
    public function faq(){
        $data['faqs'] = Faq::all();
        return view('content-management.faq',$data);
    }

    public function faqStore(Request $request)
    {
        $request->validate([
            'question' => 'required|string|max:500',
            'answer' => 'required|string',
            'type' => 'nullable|string',
        ]);

        Faq::create($request->all());

        return redirect()->route('cm.faq')->with('success', 'FAQ added successfully!');
    }

    public function seoIndex(){
        $seos = SEO::all();
        return view('seo.index',compact('seos'));
    }

    public function seoCreate(){
        $pages = Page::all();
        return view('seo.create',compact('pages'));
    }

    public function seoStore(Request $request){
        $request->validate([
            'page' => 'required|string|max:255',
            'title' => 'required|string|max:255',
            'description' => 'required|string',
            'keywords' => 'required|string|max:255',
            'canonical' => 'required|url|max:255',
        ]);
    
        SEO::create($request->all());
    
        return redirect()->route('seo.index')->with('success', 'SEO details saved successfully!');
    }

    public function examinationIndex(Request $request){
        if ($request->ajax()) {
            $data =  ExaminationCommission::all();
            
            return Datatables::of($data)
                ->addIndexColumn()
                ->addColumn('checkbox', function ($row) {
                    return '<input type="checkbox" class="column_checkbox career_checkbox" id="'.$row->id.'" name="career_checkbox[]" />';
                })
                
                ->addColumn('meta_title', function ($row) {
                    return $row->meta_title ?? '';
                 })
                 ->addColumn('meta_description', function ($row) {
                    return $row->meta_description ?? '';
                 })
                 ->addColumn('meta_keyword', function ($row) {
                    return $row->meta_keyword ?? '';
                 })
                 ->addColumn('canonical_url', function ($row) {
                    return $row->canonical_url ?? '';
                 })
                 ->addColumn('alt_tag', function ($row) {
                    return $row->alt_tag ?? '';
                 })
                ->addColumn('image', function ($row) {
                   $image = '<img style="width: 35px" src="'.asset('storage/'.$row->image).'" alt="">';
                    return $image;
                })
                ->addColumn('status', function ($row) {
                    if($row->status == 1)
                    {
                        $status = '<span class="badge badge-success">Active</span>';
                    }
                    else{
                        $status = '<span class="badge badge-secondary">Inactive</span>';
                    }
                    return $status;
                })
                ->addColumn('action', function ($row) {
                    $editUrl = route('cm.exam.edit',$row->id);
                    $actionBtn = ' <a href="'.$editUrl.'" class="btn btn-sm btn-primary" title="Edit"><i class="fa fa-file"></i></a>
                            <form action="'.route('cm.exam.destroy', $row->id).'" method="POST" style="display:inline">
                                '.csrf_field().'
                                '.method_field("DELETE").'
                                <button type="submit" class="btn btn-sm btn-danger" title="Delete"><i class="fa fa-trash"></i></button>
                            </form>';
                    return $actionBtn;
                })
                ->rawColumns(['checkbox', 'image', 'status', 'meta_title', 'meta_description', 'meta_keyword', 'canonical_url', 'alt_tag', 'action'])
                ->make(true);
            }
            return view('content-management.exam-commission');
    }

    public function examinationCreate(){
        return view('content-management.ajax.create-exam-com');
    }

    public function examinationStore(Request $request){
        $request->validate([
            'name' => 'required|string|max:255',
            'description' => 'nullable|string',
            'meta_title' => 'nullable|string|max:255',
            'meta_keyword' => 'nullable|string|max:255',
            'meta_description' => 'nullable|string|max:512',
            'canonical_url' => 'nullable|url|max:255',
            'image' => 'nullable|image|mimes:jpeg,png,jpg,gif,svg,webp|max:2048',
            'alt_tag' => 'nullable|string|max:255',
            'status' => 'required|integer|in:0,1',
        ]);
    
        // Handle file upload
        $imagePath = null;
        if ($request->hasFile('image')) {
            $imagePath = $request->file('image')->store('examination_commission_images', 'public');
        }
    
        // Create the examination_commission record
        ExaminationCommission::create([
            'name' => $request->name,
            'description' => $request->description,
            'meta_title' => $request->meta_title,
            'meta_keyword' => $request->meta_keyword,
            'meta_description' => $request->meta_description,
            'canonical_url' => $request->canonical_url,
            'image' => $imagePath,
            'alt_tag' => $request->alt_tag,
            'status' => $request->status,
        ]);
        return redirect()->back()->with('success', 'Examination Commission added successfully.');
    }
    public function examinationDelete($id){
        $exam = ExaminationCommission::findOrFail($id);
        $exam->delete();
        return redirect()->back()->with('success', 'Examination Commission deleted successfully!');
    }
    public function examinationEdit($id){
        $data['exam'] = ExaminationCommission::findOrFail($id);
        return view('content-management.ajax.edit-exam-commission',$data);
    }
    
    public function examinationUpdate(Request $request){
        $id = $request->id;
        $exam = ExaminationCommission::findOrFail($id);
        
        $request->validate([
            'name' => 'required|string|max:255',
            'description' => 'nullable|string',
            'meta_title' => 'nullable|string|max:255',
            'meta_keyword' => 'nullable|string|max:255',
            'meta_description' => 'nullable|string|max:512',
            'canonical_url' => 'nullable|url',
            'image' => 'nullable|image|mimes:jpeg,png,jpg,gif,svg|max:2048',
            'alt_tag' => 'nullable|string|max:255',
            'status' => 'required|boolean'
        ]);
    
        // Handle the file upload if an image is present
        if ($request->hasFile('image')) {
            // Delete the old image if it exists
            if ($exam->image && \Storage::exists('public/examination_commission_images/' . $exam->image)) {
                \Storage::delete('public/examination_commission_images' . $exam->image);
            }
            // Store the new image
            $exam->image = $request->image->store('uploads', 'public');
        }
    
        // Update the model with the request data
        $exam->name = $request->name;
        $exam->description = $request->description;
        $exam->meta_title = $request->meta_title;
        $exam->meta_keyword = $request->meta_keyword;
        $exam->meta_description = $request->meta_description;
        $exam->canonical_url = $request->canonical_url;
        $exam->alt_tag = $request->alt_tag;
        $exam->status = $request->status;
    
        // Save the updated model
        $exam->save();
    
        // Redirect back with a success message
        return redirect()->route('cm.exam')->with('success', 'Examination updated successfully!');
        
    }
    
    public function categoryIndex(Request $request){
        if ($request->ajax()) {
        $data = Category::with('examinationCommission')->get();
        
        return Datatables::of($data)
            ->addIndexColumn()
            ->addColumn('checkbox', function ($row) {
                return '<input type="checkbox" class="column_checkbox career_checkbox" id="'.$row->id.'" name="career_checkbox[]" />';
            })
            
            ->addColumn('commission', function ($row) {
                return $row->examinationCommission->name ?? '';
            })
            ->addColumn('meta_title', function ($row) {
                return $row->meta_title ?? '--';
             })
             ->addColumn('meta_description', function ($row) {
                return $row->meta_description ?? '--';
             })
             ->addColumn('meta_keyword', function ($row) {
                return $row->meta_keyword ?? '--';
             })
             ->addColumn('canonical_url', function ($row) {
                return $row->canonical_url ?? '--';
             })
             ->addColumn('alt_tag', function ($row) {
                return $row->alt_tag ?? '--';
             })
            ->addColumn('image', function ($row) {
               $image = '<img style="width: 35px" src="'.asset('storage/'.$row->image).'" alt="">';
                return $image;
            })
            ->addColumn('status', function ($row) {
                if($row->status == 1)
                {
                    $status = '<span class="badge badge-success">Active</span>';
                }
                else{
                    $status = '<span class="badge badge-secondary">Inactive</span>';
                }
                return $status;
            })
            ->addColumn('action', function ($row) {
                $editUrl = route('cm.category.edit',$row->id);
                $actionBtn = ' <a href="'.$editUrl.'" class="btn btn-sm btn-primary" title="Edit"><i class="fa fa-file"></i></a>
                        <form action="'.route('cm.category.delete', $row->id).'" method="POST" style="display:inline">
                            '.csrf_field().'
                            '.method_field("DELETE").'
                            <button type="submit" class="btn btn-sm btn-danger" title="Delete"><i class="fa fa-trash"></i></button>
                        </form>';
                return $actionBtn;
            })
            ->rawColumns(['checkbox', 'commission', 'status', 'meta_title', 'meta_description', 'meta_keyword', 'canonical_url', 'alt_tag', 'image', 'action'])
            ->make(true);
        }
        return view('content-management.category');
       
    }

    public function categoryCreate(){
        $data['examinationCommissions'] = ExaminationCommission::all();
        return view('content-management.ajax.create-category',$data);
    }
    
    public function categoryEdit($id){
        $data['category'] = Category::findOrFail($id);
        $data['examinationCommissions'] = ExaminationCommission::all();
        return view('content-management.ajax.edit-category',$data);
    }
    
    public function categoryUpdate(Request $request){
        $id = $request->id;
        $category = Category::findOrFail($id);
    
        // Handle the file upload if an image is present
        if ($request->hasFile('image')) {
            // Delete the old image if it exists
            if ($category->image && \Storage::exists('public/exam_commission_images/' . $category->image)) {
                \Storage::delete('public/exam_commission_images/' . $category->image);
            }
            // Store the new image
            $category->image = $request->image->store('uploads', 'public');
        }
    
        // Update the model with the request data
        $category->exam_com_id = $request->exam_com_id;
        $category->name = $request->name;
        $category->meta_title = $request->meta_title;
        $category->meta_keyword = $request->meta_keyword;
        $category->meta_description = $request->meta_description;
        $category->canonical_url = $request->canonical_url;
        $category->alt_tag = $request->alt_tag;
        $category->status = $request->status;
    
        // Save the updated model
        $category->save();
    
        // Redirect back with a success message
        return redirect()->route('cm.category')->with('success', 'Category updated successfully!');
    }

    public function categoryStore(Request $request){
        $request->validate([
            'exam_com_id' => 'nullable|integer',
            'name' => 'required|string|max:255',
            'meta_title' => 'nullable|string|max:255',
            'meta_keyword' => 'nullable|string|max:255',
            'meta_description' => 'nullable|string',
            'canonical_url' => 'nullable|string|max:255',
            'image' => 'nullable|image|max:2048', // Assuming the image is optional and its maximum size is 2MB
            'alt_tag' => 'nullable|string|max:255',
            'status' => 'required|boolean',
        ]);
    
        // Handle image upload
        if ($request->hasFile('image')) {
            $imagePath = $request->file('image')->store('exam_commission_images', 'public');
        } else {
            $imagePath = null;
        }
    
        // Create a new instance of ExaminationCommission model
        $examCommission = new Category();
        $examCommission->exam_com_id = $request->exam_com_id;
        $examCommission->name = $request->name;
        $examCommission->meta_title = $request->meta_title;
        $examCommission->meta_keyword = $request->meta_keyword;
        $examCommission->meta_description = $request->meta_description;
        $examCommission->canonical_url = $request->canonical_url;
        $examCommission->image = $imagePath;
        $examCommission->alt_tag = $request->alt_tag;
        $examCommission->status = $request->status;
        
        // Save the ExaminationCommission instance to the database
        $examCommission->save();
        return redirect()->back()->with('success', 'Category added successfully.');
    }
    public function categoryDelete($id){
        // Find all test series associated with the category ID
        $test_series = TestSeries::where('category_id', $id)->get();
    
        // Iterate through the collection and delete each test series
        foreach ($test_series as $test) {
            $test->delete();
        }
    
        // Find the category by ID and delete it
        $category = Category::findOrFail($id);
        $category->delete();
    
        // Redirect back with a success message
        return redirect()->back()->with('success', 'Category deleted successfully!');
    }
    public function subCategoryIndex(Request $request){
        if ($request->ajax()) {
            $data = SubCategory::with('category')->get();
            
            return Datatables::of($data)
            ->addIndexColumn()
            ->addColumn('checkbox', function ($row) {
                return '<input type="checkbox" class="column_checkbox career_checkbox" id="'.$row->id.'" name="career_checkbox[]" />';
            })
            
            ->addColumn('category', function ($row) {
                return $row->category->name ?? '';
            })
            ->addColumn('meta_title', function ($row) {
                return $row->meta_title ?? '--';
             })
             ->addColumn('meta_description', function ($row) {
                return $row->meta_description ?? '--';
             })
             ->addColumn('meta_keyword', function ($row) {
                return $row->meta_keyword ?? '--';
             })
             ->addColumn('canonical_url', function ($row) {
                return $row->canonical_url ?? '--';
             })
             ->addColumn('alt_tag', function ($row) {
                return $row->alt_tag ?? '--';
             })
            ->addColumn('image', function ($row) {
               $image = '<img style="width: 35px" src="'.asset('storage/'.$row->image).'" alt="">';
                return $image;
            })
            ->addColumn('status', function ($row) {
                if($row->status == 1)
                {
                    $status = '<span class="badge badge-success">Active</span>';
                }
                else{
                    $status = '<span class="badge badge-secondary">Inactive</span>';
                }
                return $status;
            })
            ->addColumn('action', function ($row) {
                $editUrl = route('cm.sub.category.edit',$row->id);
                $actionBtn = ' <a href="'.$editUrl.'" class="btn btn-sm btn-primary" title="Edit"><i class="fa fa-file"></i></a>
                        <form action="'.route('cm.sub-category.delete', $row->id).'" method="POST" style="display:inline">
                            '.csrf_field().'
                            '.method_field("DELETE").'
                            <button type="submit" class="btn btn-sm btn-danger" title="Delete"><i class="fa fa-trash"></i></button>
                        </form>';
                return $actionBtn;
            })
            ->rawColumns(['checkbox', 'commission', 'status', 'meta_title', 'meta_description', 'meta_keyword', 'canonical_url', 'alt_tag', 'action'])
            ->make(true);
        }
        return view('content-management.sub-category');
     }
    public function subCategoryCreate(){
        $data['categories'] = Category::all();
        return view('content-management.ajax.create-sub-category',$data);
    }

    public function subCategoryStore(Request $request){
        $request->validate([
            'category_id' => 'nullable|integer',
            'name' => 'required|string|max:255',
            'meta_title' => 'nullable|string|max:255',
            'meta_keyword' => 'nullable|string|max:255',
            'meta_description' => 'nullable|string',
            'canonical_url' => 'nullable|string|max:255',
            'image' => 'nullable|image|max:2048', // Assuming the image is optional and its maximum size is 2MB
            'alt_tag' => 'nullable|string|max:255',
            'status' => 'required|boolean',
        ]);
    
        // Handle image upload
        if ($request->hasFile('image')) {
            $imagePath = $request->file('image')->store('sub_category_images', 'public');
        } else {
            $imagePath = null;
        }
    
        // Create a new instance of ExaminationCommission model
        $examCommission = new SubCategory();
        $examCommission->category_id = $request->category_id;
        $examCommission->name = $request->name;
        $examCommission->meta_title = $request->meta_title;
        $examCommission->meta_keyword = $request->meta_keyword;
        $examCommission->meta_description = $request->meta_description;
        $examCommission->canonical_url = $request->canonical_url;
        $examCommission->image = $imagePath;
        $examCommission->alt_tag = $request->alt_tag;
        $examCommission->status = $request->status;
        
        // Save the ExaminationCommission instance to the database
        $examCommission->save();
        return redirect()->back()->with('success', 'Sub Category added successfully.');
    }
    
    public function subCategoryEdit($id){
        $data['subCat'] = SubCategory::findOrFail($id);
        $data['categories'] = Category::all();
        return view('content-management.ajax.edit-sub-category',$data);
    }
    
    public function subCategoryUpdate(Request $request,$id){
        if ($request->hasFile('image')) {
            $imagePath = $request->file('image')->store('sub_category_images', 'public');
        } else {
            $imagePath = null;
        }
    
        // Create a new instance of ExaminationCommission model
        $examCommission = SubCategory::findOrFail($id);
        $examCommission->category_id = $request->category_id;
        $examCommission->name = $request->name;
        $examCommission->meta_title = $request->meta_title;
        $examCommission->meta_keyword = $request->meta_keyword;
        $examCommission->meta_description = $request->meta_description;
        $examCommission->canonical_url = $request->canonical_url;
        $examCommission->image = $imagePath;
        $examCommission->alt_tag = $request->alt_tag;
        $examCommission->status = $request->status;
        
        // Save the ExaminationCommission instance to the database
        $examCommission->save();
        return redirect()->back()->with('success', 'Sub Category Updated successfully.');
    }

    public function subCategoryDelete($id){
        $subcategory = SubCategory::findOrFail($id);
        $subcategory->delete();
        return redirect()->back()->with('success', 'Sub-Category deleted successfully!');
    }
    public function subjectIndex(Request $request){
        if ($request->ajax()) {
            $data = Subject::all();
            
            return Datatables::of($data)
                ->addIndexColumn()
                ->addColumn('checkbox', function ($row) {
                    return '<input type="checkbox" class="column_checkbox career_checkbox" id="'.$row->id.'" name="career_checkbox[]" />';
                })
                
                ->addColumn('commission', function ($row) {
                    return $row->commission->name ?? '';
                })
                ->addColumn('category', function ($row) {
                    return $row->category->name ?? '';
                })
                ->addColumn('subcat', function ($row) {
                    return $row->subCategory->name ?? '';
                })
                ->addColumn('status', function ($row) {
                    if($row->status == 1)
                    {
                        $status = '<span class="badge badge-success">Active</span>';
                    }
                    else{
                        $status = '<span class="badge badge-secondary">Inactive</span>';
                    }
                    return $status;
                })
                ->addColumn('action', function ($row) {
                    $editUrl = route('cm.subject.edit',$row->id);
                    $actionBtn = ' <a href="'.$editUrl.'" class="btn btn-sm btn-primary" title="Edit"><i class="fa fa-file"></i></a>
                            <form action="'.route('cm.subject.delete', $row->id).'" method="POST" style="display:inline">
                                '.csrf_field().'
                                '.method_field("DELETE").'
                                <button type="submit" class="btn btn-sm btn-danger" title="Delete"><i class="fa fa-trash"></i></button>
                            </form>';
                    return $actionBtn;
                })
                ->rawColumns(['checkbox', 'subcat', 'category', 'commission', 'status', 'action'])
                ->make(true);
            }
            return view('content-management.subject');
    }

    public function subjectCreate(){
        $data['commissions'] = ExaminationCommission::all();
        $lastsubject = Subject::orderBy('id', 'desc')->first();
        if(isset($lastsubject) && !empty($lastsubject))
        {
            $data['subject_code'] = 'SUBJ-'.$lastsubject->id;
        }
        else{
            $data['subject_code'] = 'SUBJ-1';
        }
        return view('content-management.ajax.create-subject',$data);
    }
    
    public function subjectEdit($id){
        $data['subject'] = Subject::findOrFail($id);
        $data['commissions'] = ExaminationCommission::all();
        $data['categories'] = Category::where('exam_com_id',$data['subject']->exam_com_id)->get();
        $data['subcategories'] = SubCategory::where('category_id',$data['subject']->category_id)->get();
        return view('content-management.ajax.edit-subject',$data);
    }
    
    public function subjectUpdate($id,Request $request){
        $subject = Subject::findOrFail($id);

        // Update the subject with the request data
        $subject->update([
            'exam_com_id' => $request->input('exam_com_id'),
            'category_id' => $request->input('category_id'),
            'sub_category_id' => $request->input('sub_category_id'),
            'name' => $request->input('name'),
            'status' => $request->input('status'),
        ]);

        // Redirect back with a success message
        return redirect()->route('cm.subject')->with('success', 'Subject updated successfully.');
    }

    public function subjectStore(Request $request){
        $request->validate([
            'exam_com_id' => 'required|exists:examination_commission,id',
            'category_id' => 'required|exists:category,id',
            'sub_category_id' => 'nullable|exists:sub_category,id',
            'name' => 'required|string|max:255',
            'subject_code' => 'nullable|string|max:255',
            'status' => 'required|boolean',
        ]);

        Subject::create([
            'exam_com_id' => $request->exam_com_id,
            'category_id' => $request->category_id,
            'sub_category_id' => $request->sub_category_id ?? NULL,
            'name' => $request->name,
            'subject_code' => $request->subject_code,
            'status' => $request->status,
        ]);

        return redirect()->route('cm.subject')->with('success', 'Subject created successfully!');
    }

    public function subjectDelete($id){
        $subject = Subject::findOrFail($id);
        $subject->delete();
        return redirect()->back()->with('success', 'Subject deleted successfully!');
    }
    public function chapterIndex(Request $request){
        if ($request->ajax()) {
            $data =  Chapter::all();
            
            return Datatables::of($data)
                ->addIndexColumn()
                ->addColumn('checkbox', function ($row) {
                    return '<input type="checkbox" class="column_checkbox career_checkbox" id="'.$row->id.'" name="career_checkbox[]" />';
                })
               
                ->addColumn('subject', function ($row) {
                    return $row->subject->name ?? '';
                })
                
                ->addColumn('status', function ($row) {
                    if($row->status == 1)
                    {
                        $status = '<span class="badge badge-success">Active</span>';
                    }
                    else{
                        $status = '<span class="badge badge-secondary">Inactive</span>';
                    }
                    return $status;
                })
                ->addColumn('action', function ($row) {
                    $editUrl = route('cm.chapter.edit',$row->id);
                    $actionBtn = ' <a href="'.$editUrl.'" class="btn btn-sm btn-primary" title="Edit"><i class="fa fa-file"></i></a>
                            <form action="'.route('cm.chapter.delete', $row->id).'" method="POST" style="display:inline">
                                '.csrf_field().'
                                '.method_field("DELETE").'
                                <button type="submit" class="btn btn-sm btn-danger" title="Delete"><i class="fa fa-trash"></i></button>
                            </form>';
                    return $actionBtn;
                })
                ->rawColumns(['checkbox', 'subject', 'status', 'action'])
                ->make(true);
            }
        return view('content-management.chapter');
        
    }
    public function chapterCreate(){
        $data['commissions'] = ExaminationCommission::all();
        $data['subjects'] = Subject::all();
        return view('content-management.ajax.create-chapter',$data);
    }

    public function chapterStore(Request $request){
        $request->validate([
            'exam_com_id' => 'required|exists:examination_commission,id',
            'category_id' => 'required|exists:category,id',
            'sub_category_id' => 'nullable|exists:sub_category,id',
            'subject_id' => 'required|exists:subject,id',
            'name' => 'required|string|max:255',
            'chapter_number' => 'nullable|string|max:255',
            'description' => 'required|string',
            'status' => 'required|boolean',
        ]);

        Chapter::create([
            'exam_com_id' => $request->exam_com_id,
            'category_id' => $request->category_id,
            'sub_category_id' => $request->sub_category_id ?? NULL,
            'subject_id' => $request->subject_id,
            'name' => $request->name,
            'chapter_number' => $request->chapter_number,
            'description' => $request->description,
            'status' => $request->status,
        ]);

        return redirect()->route('cm.chapter')->with('success', 'Chapter created successfully!');
    }

    public function chapterEdit($id)
    {
        $data['commissions'] = ExaminationCommission::all();
        $data['categories'] = Category::all();
        $data['subcategories'] = SubCategory::all();
        $data['subjects'] = Subject::all();
        $data['chapter'] = Chapter::where('id',$id)->first();
        return view('content-management.ajax.edit-chapter',$data);
    }
    public function chapterUpdate(Request $request, $id)
    {
        $request->validate([
            'exam_com_id' => 'required|exists:examination_commission,id',
            'category_id' => 'required|exists:category,id',
            'sub_category_id' => 'nullable|exists:sub_category,id',
            'subject_id' => 'required|exists:subject,id',
            'name' => 'required|string|max:255',
            'chapter_number' => 'required|string|max:255',
            'description' => 'required|string',
            'status' => 'required|boolean',
        ]);

        Chapter::where('id',$id)->update([
            'exam_com_id' => $request->exam_com_id,
            'category_id' => $request->category_id,
            'sub_category_id' => $request->sub_category_id ?? NULL,
            'subject_id' => $request->subject_id,
            'name' => $request->name,
            'chapter_number' => $request->chapter_number,
            'description' => $request->description,
            'status' => $request->status,
        ]);

        return redirect()->route('cm.chapter')->with('success', 'Topic updated successfully!');
    }
    public function chapterDelete($id){
        $chapter = Chapter::findOrFail($id);
        $chapter->delete();
        return redirect()->back()->with('success', 'Chapter deleted successfully!');
    }

    public function courseIndex(Request $request){
        if ($request->ajax()) {
            $data = Course::with('examinationCommission','category','subCategory')->get();
            
            return Datatables::of($data)
                ->addIndexColumn()
                ->addColumn('checkbox', function ($row) {
                    return '<input type="checkbox" class="column_checkbox career_checkbox" id="'.$row->id.'" name="career_checkbox[]" />';
                })
                ->addColumn('image', function ($row) {
                    $image = '<img style="width: 35px" src="'.asset('storage/'.$row->image).'" alt="">';
                     return $image;
                 })
                ->addColumn('fee', function ($row) {
                    return $row->course_fee ?? '--';
                })
                ->addColumn('duration', function ($row) {
                    return $row->duration ?? '0';
                })
                ->addColumn('commission', function ($row) {
                    return $row->examinationCommission->name ?? '--';
                })
                ->addColumn('category', function ($row) {
                    return $row->category->name ?? '--';
                })
                ->addColumn('subcat', function ($row) {
                    return $row->subCategory->name ?? '--';
                })
                
                ->addColumn('action', function ($row) {
                    $editUrl = route('courses.course.edit',$row->id);
                    $actionBtn = ' <a href="'.$editUrl.'" class="btn btn-sm btn-primary" title="Edit"><i class="fa fa-file"></i></a>
                            <form action="'.route('courses.course.delete', $row->id).'" method="POST" style="display:inline">
                                '.csrf_field().'
                                '.method_field("DELETE").'
                                <button type="submit" class="btn btn-sm btn-danger" title="Delete"><i class="fa fa-trash"></i></button>
                            </form>';
                    return $actionBtn;
                })
                ->rawColumns(['checkbox', 'fee', 'image', 'duration', 'category', 'subcat', 'commission', 'action'])
                ->make(true);
            }
            return view('content-management.course');
        
    }

    public function courseCreate(){
        $data['examinationCommissions'] = ExaminationCommission::all();
        $data['categories'] = Category::all();
        $data['subcategories'] = SubCategory::all();
        return view('content-management.ajax.create-course',$data);
    }
    
    public function courseEdit($id){
        $data['examinationCommissions'] = ExaminationCommission::all();
        $data['course'] = Course::with('category','subCategory')->findOrFail($id);
        return view('content-management.ajax.edit-course',$data);
    }
    
    public function courseUpdate(Request $request,$id){
        $course = Course::findOrFail($id);

        $course->examination_commission_id = $request->examination_commission_id;
        $course->category_id = $request->category_id;
        $course->sub_category_id = $request->sub_category_id;
        $course->name = $request->name;
        $course->duration = $request->duration;
        $course->course_fee = $request->course_fee;
        $course->feature = $request->feature ?? 'off';
        $course->discount = $request->discount;
        $course->offered_price = $request->offered_price;
        $course->num_classes = $request->num_classes;
        $course->num_topics = $request->num_topics;
        $course->language_of_teaching = implode(',', $request->language_of_teaching);
        $course->course_heading = $request->course_heading;
        $course->short_description = $request->short_description;
        $course->course_overview = $request->course_overview;
        $course->detail_content = $request->detail_content;
        $course->youtube_url = $request->youtube_url;
        $course->meta_title = $request->meta_title;
        $course->meta_keyword = $request->meta_keyword;
        $course->meta_description = $request->meta_description;
        $course->image_alt_tag = $request->image_alt_tag;
    
        if ($request->hasFile('thumbnail_image')) {
            $thumbnailPath = $request->file('thumbnail_image')->store('thumbnails', 'public');
            $course->thumbnail_image = $thumbnailPath;
        }
    
        if ($request->hasFile('banner_image')) {
            $bannerPath = $request->file('banner_image')->store('banners', 'public');
            $course->banner_image = $bannerPath;
        }
    
        $course->save();
    
        return redirect()->route('courses.course.index')->with('success', 'Course updated successfully');
    }
    
    

    public function courseStore(Request $request){
        $request->validate([
            'examination_commission_id' => 'required|exists:examination_commission,id',
            'category_id' => 'nullable|exists:category,id',
            'sub_category_id' => 'nullable|exists:sub_category,id',
            'name' => 'required|string|max:255',
            'duration' => 'required|string|max:255',
            'course_fee' => 'required|numeric',
            'discount' => 'required|integer',
            'offered_price' => 'required|numeric',
            'num_classes' => 'required|integer',
            'num_topics' => 'required|integer',
            'language_of_teaching' => 'required|array',
            'language_of_teaching.*' => 'required|string',
            'course_heading' => 'required|string|max:255',
            'short_description' => 'required|string',
            'course_overview' => 'required|string',
            'detail_content' => 'required|string',
            'thumbnail_image' => 'required|image|mimes:jpeg,png,jpg,gif,svg,webp|max:2048',
            'banner_image' => 'required|image|mimes:jpeg,png,jpg,gif,svg,webp|max:2048',
            'youtube_url' => 'nullable|url',
            'meta_title' => 'nullable|string|max:255',
            'meta_keyword' => 'nullable|string|max:255',
            'meta_description' => 'nullable|string|max:255',
            'image_alt_tag' => 'nullable|string|max:255',
            'feature' => 'nullable',
        ]);
    
        // Handle the file uploads
        $thumbnailImagePath = $request->file('thumbnail_image')->store('thumbnails', 'public');
        $bannerImagePath = $request->file('banner_image')->store('banners', 'public');
    
        // Create a new course record
        $course = new Course();
        $course->examination_commission_id = $request->examination_commission_id;
        $course->category_id = $request->category_id;
        $course->sub_category_id = $request->sub_category_id;
        $course->name = $request->name;
        $course->feature = $request->feature ?? 'off';
        $course->duration = $request->duration;
        $course->course_fee = $request->course_fee;
        $course->discount = $request->discount;
        $course->offered_price = $request->offered_price;
        $course->num_classes = $request->num_classes;
        $course->num_topics = $request->num_topics;
        $course->language_of_teaching = implode(',', $request->language_of_teaching); // Storing as comma-separated values
        $course->course_heading = $request->course_heading;
        $course->short_description = $request->short_description;
        $course->course_overview = $request->course_overview;
        $course->detail_content = $request->detail_content;
        $course->thumbnail_image = $thumbnailImagePath;
        $course->banner_image = $bannerImagePath;
        $course->youtube_url = $request->youtube_url;
        $course->meta_title = $request->meta_title;
        $course->meta_keyword = $request->meta_keyword;
        $course->meta_description = $request->meta_description;
        $course->image_alt_tag = $request->image_alt_tag;
        
        $course->save();
    
        // Redirect to a relevant page with a success message
        return redirect()->route('courses.course.index')->with('success', 'Course created successfully');
    }

    public function courseDelete($id){
        $course = Course::findOrFail($id);
        $course->delete();
        return redirect()->back()->with('success', 'Course deleted successfully!');
    }
    
    public function currentAffairDelete($id){
        $currentAffair = CurrentAffair::findOrFail($id);
        $currentAffair->delete();
        return redirect()->back()->with('success', 'Current Affair deleted successfully!');
    }

    public function directEnquiriesIndex(){
        $data['enquiries'] = DirectEnquiry::orderBy('created_at','DESC')->get();
        return view('enquiries.direct-enquiries',$data);
    }

    public function directEnquiriesDelete($id){
        $direct = DirectEnquiry::findOrFail($id);
        $direct->delete();
        return redirect()->back()->with('success', 'Enquiry deleted successfully!');
    }

    public function contactUsIndex(Request $request){
        if ($request->ajax()) {
            $data = ContactUs::orderBy('created_at','DESC')->get();
            
        return Datatables::of($data)
            ->addIndexColumn()
            ->addColumn('checkbox', function ($row) {
                return '<input type="checkbox" class="column_checkbox career_checkbox" id="'.$row->id.'" name="career_checkbox[]" />';
            })
            ->addColumn('created_at', function ($row) {
                return $row->created_at;
            })
            
            
            ->addColumn('action', function ($row) {
                $actionBtn = ' <form action="'.route('enquiries.contact.delete', $row->id).'" method="POST" style="display:inline">
                            '.csrf_field().'
                            '.method_field("DELETE").'
                            <button type="submit" class="btn btn-sm btn-danger" title="Delete"><i class="fa fa-trash"></i></button>
                        </form>';
                return $actionBtn;
            })
            ->rawColumns(['checkbox', 'created_at', 'action'])
            ->make(true);
        }
        return view('enquiries.contact-us');
       
    }

    public function contactUsDelete($id){
        $contact = ContactUs::findOrFail($id);
        $contact->delete();
        return redirect()->back()->with('success', 'Contact Us deleted successfully!');
    }

    public function callRequestIndex(){
        $data['callbacks'] = CallBack::orderBy('created_at','DESC')->get();
        return view('enquiries.call-back-request',$data);
    }
    public function callRequestDelete($id){
        $callback = CallBack::findOrFail($id);
        $callback->delete();
        return redirect()->back()->with('success', 'CallBack Request deleted successfully!');
    }

    public function topicIndex(){
        $data['topics'] = Topic::all();
        return view('current-affairs.topic',$data);
    }

    public function topicStore(Request $request){
        $request->validate([
            'name' => 'required|string|max:255',
            'description' => 'string|max:1000',
        ]);

        Topic::create([
            'name' => $request->name,
            'description' => $request->description,
        ]);

        return redirect()->back()->with('success', 'Topic added successfully.');
    }

    public function topicDelete($id){
        $topic = Topic::findOrFail($id);
        $topic->delete();
        return redirect()->back()->with('success', 'Topic deleted successfully!');
    }

    public function currentAffairIndex(){
        $data['currentAffairs'] = CurrentAffair::with('topic')->get();
        return view('current-affairs.index',$data);
    }

    public function currentAffairCreate(){
        $data['topics'] = Topic::all();
        return view('current-affairs.create',$data);
    }

    public function currentAffairStore(Request $request){
        $validator = Validator::make($request->all(), [
            'topic_id' => 'required|integer',
            'title' => 'required|string|max:255',
            'short_description' => 'required|string',
            'details' => 'required|string',
            'publishing_date' => 'required',
            'thumbnail_image' => 'required|image|mimes:jpeg,png,jpg,gif,svg,webp|max:2048',
            'banner_image' => 'nullable|image|mimes:jpeg,png,jpg,gif,svg,webp|max:2048',
            'image_alt_tag' => 'nullable|string|max:255',
            'meta_title' => 'nullable|string|max:255',
            'meta_keyword' => 'nullable|string|max:255',
            'meta_description' => 'nullable|string|max:255',
        ]);

        if ($validator->fails()) {
            return redirect()->back()->withErrors($validator)->withInput();
        }

        // Handle file uploads
        $thumbnailPath = null;
        $bannerPath = null;

        if ($request->hasFile('thumbnail_image')) {
            $thumbnailPath = $request->file('thumbnail_image')->store('thumbnails', 'public');
        }

        if ($request->hasFile('banner_image')) {
            $bannerPath = $request->file('banner_image')->store('banners', 'public');
        }

        // Create a new record in the database
        $currentAffair = CurrentAffair::create([
            'topic_id' => $request->topic_id,
            'title' => $request->title,
            'short_description' => $request->short_description,
            'details' => $request->details,
            'publishing_date' => $request->publishing_date,
            'thumbnail_image' => $thumbnailPath,
            'banner_image' => $bannerPath,
            'image_alt_tag' => $request->image_alt_tag,
            'meta_title' => $request->meta_title,
            'meta_keyword' => $request->meta_keyword,
            'meta_description' => $request->meta_description,
        ]);

        return redirect()->route('current.affairs.index')->with('success', 'Current Affair added successfully!');
    }

    public function studyMaterialIndex(Request $request){
        if ($request->ajax()) {
            if($request->type == 1)
            {
                $data = StudyMaterial::with('maintopic', 'studycategory')->where('IsPaid',1)->orderBy('created_at','DESC')->get();
            }
            else{
                $data = StudyMaterial::with('maintopic', 'studycategory')->where('IsPaid',0)->orderBy('created_at','DESC')->get();
            }
            
            return Datatables::of($data)
                ->addIndexColumn()
                ->addColumn('checkbox', function ($row) {
                    return '<input type="checkbox" class="column_checkbox career_checkbox" id="'.$row->id.'" name="career_checkbox[]" />';
                })
                ->addColumn('created_at', function ($row) {
                    return $row->created_at;
                })
                ->addColumn('category', function ($row) {
                    return $row->studycategory->name;
                })
                ->addColumn('topic', function ($row) {
                    return $row->maintopic->name;
                })
                ->addColumn('status', function ($row) {
                    if($row->status == 'Active')
                    {
                        $status = '<span class="badge badge-success">Active</span>';
                    }
                    else{
                        $status = '<span class="badge badge-secondary">Inactive</span>';
                    }
                    return $status;
                })
                ->addColumn('action', function ($row) {
                    $editUrl = route('study.material.edit',$row->id);
                  $actionBtn = ' <a href="'.$editUrl.'" class="btn btn-sm btn-primary" title="Edit"><i class="fa fa-file"></i></a>
                            <form action="'.route('study.material.delete', $row->id).'" method="POST" style="display:inline">
                                '.csrf_field().'
                                '.method_field("DELETE").'
                                <button type="submit" class="btn btn-sm btn-danger" title="Delete"><i class="fa fa-trash"></i></button>
                            </form>';
                  return $actionBtn;
                })
                ->rawColumns(['checkbox', 'created_at', 'category', 'topic', 'status', 'action'])
                ->make(true);
        }
        return view('study-material.index');
        // $data['free_study_materials'] = StudyMaterial::with('maintopic', 'studycategory')->where('IsPaid',0)->orderBy('created_at','DESC')->get();
        // $data['paid_study_materials'] = StudyMaterial::with('maintopic', 'studycategory')->where('IsPaid',1)->orderBy('created_at','DESC')->get();
        // return view('study-material.index',$data);
    }
    public function studyMaterialCreate(){
        $data['categories'] = StudyMaterialCategory::all();
        return view('study-material.create',$data);
    }

    public function studyMaterialStore(Request $request){
        $validatedData = $request->validate([
            'category_id' => 'required',
            'topic_id' => 'required',
            
            'title' => 'required',
            'short_description' => 'required|string',
            'detail_content' => 'required',
            'status' => 'required',
            'pdf' => 'required|file|mimes:pdf|max:2048', // Assuming maximum file size is 2048 KB (2 MB)
            'meta_title' => 'nullable|string',
            'meta_keyword' => 'nullable|string',
            'meta_description' => 'nullable|string',
            'banner' => 'required',
            'IsPaid' => 'required',
            'price' => 'nullable',
        ]);

        // Upload PDF file
        $pdfPath = $request->file('pdf')->store('pdfs','public');
        $bannerPath = $request->file('banner')->store('banners','public');

        // Create a new StudyMaterial instance
        $studyMaterial = new StudyMaterial();
        $studyMaterial->category_id = $validatedData['category_id'];
        $studyMaterial->topic_id = $validatedData['topic_id'];
        $studyMaterial->title = $validatedData['title'];
        $studyMaterial->short_description = $validatedData['short_description'];
        $studyMaterial->detail_content = $validatedData['detail_content'];
        $studyMaterial->status = $validatedData['status'];
        $studyMaterial->pdf = $pdfPath;
        $studyMaterial->banner = $bannerPath;
        $studyMaterial->IsPaid = $validatedData['IsPaid'];
        $studyMaterial->price = $validatedData['price'];
        $studyMaterial->mrp = $request->mrp;
        $studyMaterial->discount = $request->discount;
        $studyMaterial->meta_title = $validatedData['meta_title'];
        $studyMaterial->meta_keyword = $validatedData['meta_keyword'];
        $studyMaterial->meta_description = $validatedData['meta_description'];
        $studyMaterial->save();

        // Redirect back with success message
        return redirect()->route('study.material.index')->with('success', 'Study material has been created successfully.');
    }
    
    public function studyMaterialEdit($id){
        $data['material'] = StudyMaterial::findOrFail($id);
        $data['categories'] = StudyMaterialCategory::all();
        $data['topics'] = MainTopic::all();
        return view('study-material.edit',$data);
    }
    
    public function studyMaterialUpdate($id,Request $request){
        $material = StudyMaterial::findOrFail($id);
        $material->category_id = $request->category_id;
        $material->topic_id = $request->topic_id;
        $material->title = $request->title;
        $material->short_description = $request->short_description;
        $material->detail_content = $request->detail_content;
        $material->IsPaid = $request->IsPaid;
        $material->mrp = $request->mrp;
        $material->discount = $request->discount;
        $material->price = $request->price;
        $material->status = $request->status;
        $material->meta_title = $request->meta_title;
        $material->meta_keyword = $request->meta_keyword;
        $material->meta_description = $request->meta_description;

        if ($request->hasFile('banner')) {
            // Delete the old banner if exists
            if ($material->banner) {
                Storage::delete($material->banner);
            }
            // Store the new banner
            $material->banner = $request->file('banner')->store('banners','public');
        }

        if ($request->hasFile('pdf')) {
            // Delete the old pdf if exists
            if ($material->pdf) {
                Storage::delete($material->pdf);
            }
            $material->pdf = $request->file('pdf')->store('pdfs','public');
        }

        $material->save();

        return redirect()->route('study.material.index')->with('success', 'Study Material updated successfully');
    }

    public function studyMaterialDelete($id){
        $studyMaterial = StudyMaterial::findOrFail($id);
        $studyMaterial->delete();
        return redirect()->back()->with('success','Study Material deleted successfully.');
    }

    public function dailyBoostIndex(Request $request){
        if ($request->ajax()) {
            $data = DailyBooster::orderBy('created_at','DESC')->get();
            return Datatables::of($data)
                ->addIndexColumn()
                ->addColumn('checkbox', function ($row) {
                    return '<input type="checkbox" class="column_checkbox career_checkbox" id="'.$row->id.'" name="career_checkbox[]" />';
                })
                ->addColumn('created_at', function ($row) {
                    return $row->created_at;
                })
                ->addColumn('image', function ($row) {
                    $linkUrl = asset("storage/" . $row->thumbnail);
                    $link = '<img src="'.$linkUrl.'" alt="Image" width="50">';
                    return $link;
                })
                ->addColumn('action', function ($row) {
                    $editUrl = route('daily.boost.edit',$row->id);
                  $actionBtn = ' <a href="'.$editUrl.'" class="btn btn-sm btn-primary" title="Edit"><i class="fa fa-file"></i></a>
                            <form action="'.route('daily.boost.delete', $row->id).'" method="POST" style="display:inline">
                                '.csrf_field().'
                                '.method_field("DELETE").'
                                <button type="submit" class="btn btn-sm btn-danger" title="Delete"><i class="fa fa-trash"></i></button>
                            </form>';
                  return $actionBtn;
                })
                ->rawColumns(['checkbox', 'created_at', 'image', 'action'])
                ->make(true);
        }
        return view('daily-booster.index');
    }

    public function dailyBoostCreate(){
        return view('daily-booster.create');
    }
    
    public function dailyBoostEdit($id){
        $data['dailyBooster'] = DailyBooster::findOrFail($id);
        return view('daily-booster.edit',$data);
    }
    
    public function dailyBoostUpdate($id,Request $request){
        $dailyBooster = DailyBooster::findOrFail($id);
       if ($request->hasFile('thumbnail')) {
            // Delete old thumbnail if exists
            if ($dailyBooster->thumbnail) {
                Storage::disk('public')->delete($dailyBooster->thumbnail);
            }
            $thumbnailPath = $request->file('thumbnail')->store('thumbnails', 'public');
        } else {
            $thumbnailPath = $dailyBooster->thumbnail;
        }

        // Update Daily Booster
        $dailyBooster->update([
            'title' => $request->input('title'),
            'start_date' => $request->input('start_date'),
            'youtube_url' => $request->input('youtube_url'),
            'short_description' => $request->input('short_description'),
            'detail_content' => $request->input('detail_content'),
            'thumbnail' => $thumbnailPath,
            'image_alt_tag' => $request->input('image_alt_tag'),
            'meta_title' => $request->input('meta_title'),
            'meta_keyword' => $request->input('meta_keyword'),
            'meta_description' => $request->input('meta_description'),
        ]);

        // Redirect with success message
        return redirect()->route('daily.boost.index')->with('success', 'Daily Booster updated successfully.');
    }

    public function dailyBoostStore(Request $request){
        $request->validate([
            'title' => 'required|string|max:255',
            'start_date' => 'required|date',
            'youtube_url' => 'nullable|url',
            'short_description' => 'required|string',
            'detail_content' => 'required',
            'thumbnail' => 'nullable|image|mimes:jpeg,png,jpg,gif,svg,webp|max:2048',
            'image_alt_tag' => 'nullable|string|max:255',
            'meta_title' => 'nullable|string|max:255',
            'meta_keyword' => 'nullable|string|max:255',
            'meta_description' => 'nullable|string|max:255',
        ]);

        $data = $request->only([
            'title', 
            'start_date', 
            'youtube_url', 
            'short_description', 
            'detail_content', 
            'image_alt_tag', 
            'meta_title', 
            'meta_keyword', 
            'meta_description'
        ]);

        if ($request->hasFile('thumbnail')) {
            $data['thumbnail'] = $request->file('thumbnail')->store('thumbnails', 'public');
        }

        DailyBooster::create($data);

        return redirect()->route('daily.boost.index')->with('success', 'Daily Booster created successfully.');
    }

    public function dailyBoostDelete($id){
        $dailyBooster = DailyBooster::findOrFail($id);
        $dailyBooster->delete();
        return redirect()->back()->with('success','Daily Booster deleted successfully.');
    }

    public function testPlannerIndex(Request $request){
        
        if ($request->ajax()) {
            $data = TestPlanner::orderBy('created_at','DESC')->get();
            return Datatables::of($data)
                ->addIndexColumn()
                ->addColumn('created_at', function ($row) {
                    return $row->created_at;
                })
                ->addColumn('checkbox', function ($row) {
                    return '<input type="checkbox" class="column_checkbox career_checkbox" id="'.$row->id.'" name="career_checkbox[]" />';
                })
                ->addColumn('status', function ($row) {
                    if($row->status == 1)
                    {
                        $status = '<span class="badge badge-success">Active</span>';
                    }
                    else{
                        $status = '<span class="badge badge-secondary">Inactive</span>';
                    }
                    return $status;
                })
                ->addColumn('action', function ($row) {
                    $editUrl = route('test.planner.edit',$row->id);
                    $actionBtn = ' <a href="'.$editUrl.'" class="btn btn-sm btn-primary" title="Edit"><i class="fa fa-file"></i></a>
                            <form action="'.route('test.planner.delete', $row->id).'" method="POST" style="display:inline">
                                '.csrf_field().'
                                '.method_field("DELETE").'
                                <button type="submit" class="btn btn-sm btn-danger" title="Delete"><i class="fa fa-trash"></i></button>
                            </form>';
                    return $actionBtn;
                })
                ->rawColumns(['checkbox', 'created_at', 'status', 'action'])
                ->make(true);
        }
        return view('test-planner.index');
        //$data['test_planners'] = TestPlanner::orderBy('created_at','DESC')->get();
        //return view('test-planner.index',$data);
    }

    public function testPlannerCreate(){
        return view('test-planner.create');
    }
    
    public function testPlannerEdit($id){
        $data['testPlanner'] = TestPlanner::findOrFail($id);
        return view('test-planner.edit',$data);
    }
    
    public function testPlannerUpdate(Request $request,$id){
        $testPlanner = TestPlanner::findOrFail($id);
        $testPlanner->title = $request->input('title');
        $testPlanner->start_date = $request->input('start_date');
        $testPlanner->short_description = $request->input('short_description');
        $testPlanner->detail_content = $request->input('detail_content');
        $testPlanner->status = $request->input('status');

        if ($request->hasFile('pdf')) {
            $testPlanner->pdf = $request->file('pdf')->store('pdfs', 'public');
        }

        $testPlanner->save();

        return redirect()->route('test.planner.index')->with('success', 'Test Planner updated successfully');
    }

    public function testPlannerStore(Request $request){
        $request->validate([
            'title' => 'required|string|max:255',
            'start_date' => 'required|date',
            'short_description' => 'required|string',
            'detail_content' => 'required',
            'pdf' => 'required|mimes:pdf|max:2048',
            'status' => 'required|integer',
        ]);

        $data = $request->only([
            'title', 
            'start_date', 
            'short_description', 
            'detail_content', 
            'status'
        ]);

        if ($request->hasFile('pdf')) {
            $data['pdf'] = $request->file('pdf')->store('pdfs', 'public');
        }

        TestPlanner::create($data);

        return redirect()->back()->with('success', 'Test Planner created successfully.');
    }
    public function testPlannerDelete($id){
        $test = TestPlanner::findOrFail($id);
        $test->delete();
        return redirect()->back()->with('success','Test Planner deleted successfully.');
    }

    public function testSeriesIndex(){
        $data['test_series'] = TestSeries::with('category')->get();
        return view('test-series.index',$data);
    }
    public function testSeriesCreate(){
         $data['commissions'] = ExaminationCommission::get();
        $data['subjects'] = [];
        $data['topics'] = [];
        $data['categories'] = [];
        return view('test-series.create',$data);
    }
    public function testSeriesStore(Request $request){
        $validator = Validator::make($request->all(), [
            'title' => 'required|string|max:512',
            // 'category_id' => 'required',
            // 'total_chapter' => 'required|integer|min:0',
            // 'total_affairs' => 'required|integer|min:0',
            // 'free_tests' => 'required|integer|min:0',
            // 'total_subjects' => 'required|integer|min:0',
            'logo' => 'nullable|image|mimes:jpeg,png,jpg,gif,svg,webp|max:2048',
            // 'total_marks' => 'required|integer|min:0',
            // 'duration' => 'required|integer|min:1',
            // 'description' => 'required',
            'price' => 'required',
            'mrp' => 'required',
            'discount' => 'required',
        ]);
        if($validator->fails()){
            
            return response()->json([
                'success' => false,
                'code' => 422,
                'errors' => $validator->errors(),
            ]);
        }
        $data = $request->all();
        
        if ($request->hasFile('logo')) {
            $logoPath = $request->file('logo')->store('logos', 'public');
            $data['logo'] = $logoPath;
        }
      $testseries =  TestSeries::create($data);
         $additionalData = json_decode($request->input('additionalData'), true);

        // Loop through the additional data and save each entry
        foreach ($additionalData['testType'] as $index => $testType) {
            // Loop through each selected question for the current index
            $testTypename="";
            if($testType == 1){
                $testTypename="Full Test";
            }
            if($testType == 2){
                $testTypename="Subject Wise";
            }
            if($testType == 3){
                $testTypename="Chapter Wise";
            }
            if($testType == 4){
                $testTypename="Topic Wise";
            }
            if($testType == 5){
                $testTypename="Current Affair";
            }if($testType == 6){
                $testTypename="Previous Year";
            }
            foreach ($additionalData['selectedtestpaper'][$index] as $selectedtestpaper) {
                $testSeriesDetail = new TestSeriesDetail();
                $testSeriesDetail->type = $testType;
                $testSeriesDetail->type_name = $testTypename;
                $testSeriesDetail->test_series_id = $testseries->id;
                $testSeriesDetail->test_id = $selectedtestpaper; // Save selected questions as JSON
                $testSeriesDetail->save();
            }
        }
        
        

       return response()->json([
                    'success' => true,
                    'msgText' => 'Test Created !',
                ]);

    }
    public function testSeriesEdit($id){
        $series = TestSeries::with('category')->findOrFail($id);
        $data['test_series'] = $series;
        $data['commissions'] = ExaminationCommission::get();
        $data['subjects'] = [];
        $data['topics'] = [];
        
        if($series->exam_com_id !='' && $series->exam_com_id > 0)
        {
            
            $data['categories'] = Category::where('exam_com_id',$series->exam_com_id)->get();
        }
        else{
            $data['categories'] = [];
        }

        if($series->sub_category_id != NULL && $series->category_id != NULL)
        {
            $subcategories = SubCategory::where('category_id',$series->category_id)->get();
        }
        else{
            $subcategories = array();
        }
        $data['subcategories'] = $subcategories;
        return view('test-series.edit',$data);
    }

    public function testSeriesUpdate(Request $request,$id){
        $validator = Validator::make($request->all(), [
            'title' => 'required|string|max:512',
            // 'category_id' => 'required',
            // 'total_chapter' => 'required|integer|min:0',
            // 'total_affairs' => 'required|integer|min:0',
            // 'free_tests' => 'required|integer|min:0',
            // 'total_subjects' => 'required|integer|min:0',
            'logo' => 'nullable|image|mimes:jpeg,png,jpg,gif,svg,webp|max:2048',
            // 'total_marks' => 'required|integer|min:0',
            // 'duration' => 'required|integer|min:1',
            // 'description' => 'required',
            'price' => 'required',
            'mrp' => 'required',
            'discount' => 'required',
        ]);
        if($validator->fails()){
            
            return response()->json([
                'success' => false,
                'code' => 422,
                'errors' => $validator->errors(),
            ]);
        }
        $test = TestSeries::findOrFail($id);
        $data = $request->all();
        
        if ($request->hasFile('logo')) {
            $logoPath = $request->file('logo')->store('logos', 'public');
            $data['logo'] = $logoPath;
        }
        else{
            $data['logo'] = $test->logo;
        }
        $test->language = $data['language'];
        $test->exam_com_id = $data['exam_com_id'];
        $test->title = $data['title'];
        $test->category_id  = $data['category_id'];
        $test->sub_category_id = $data['sub_category_id'];
        $test->slug = $data['slug'];
        $test->short_description = $data['short_description'];
        $test->mrp = $data['mrp'];
        $test->discount = $data['discount'];
        $test->price = $data['price'];
        $test->description = $data['description'];
        $test->logo = $data['logo'];

        $test->save();
         $additionalData = json_decode($request->input('additionalData'), true);

        // Loop through the additional data and save each entry
        foreach ($additionalData['testType'] as $index => $testType) {
            // Loop through each selected question for the current index
            $testTypename="";
            if($testType == 1){
                $testTypename="Full Test";
            }
            if($testType == 2){
                $testTypename="Subject Wise";
            }
            if($testType == 3){
                $testTypename="Chapter Wise";
            }
            if($testType == 4){
                $testTypename="Topic Wise";
            }
            if($testType == 5){
                $testTypename="Current Affair";
            }if($testType == 6){
                $testTypename="Previous Year";
            }
            foreach ($additionalData['selectedtestpaper'][$index] as $selectedtestpaper) {
                $testSeriesDetail = new TestSeriesDetail();
                $testSeriesDetail->type = $testType;
                $testSeriesDetail->type_name = $testTypename;
                $testSeriesDetail->test_series_id = $test->id;
                $testSeriesDetail->test_id = $selectedtestpaper; // Save selected questions as JSON
                $testSeriesDetail->save();
            }
        }
        
        

       return response()->json([
                    'success' => true,
                    'msgText' => 'Test Created !',
                ]);
    }

    public function testSeriesDelete($id){
        $test_series = TestSeries::findOrFail($id);
        TestSeriesDetail::where('test_series_id',$id)->delete();
        $test_series->delete();
         return redirect()->back()->with('success','Test series deleted successfully!');
    }

    public function testSeriesQuestion(){
        return view('test-series.question');
    }

    public function testSeriesQuestionCreate(){
        return view('test-series.add-question');
    }

    public function upcomingExamIndex(Request $request){
        if ($request->ajax()) {
            $data = UpcomingExam::with('exam_commission')->get();
 
            return Datatables::of($data)
                ->addIndexColumn()
                ->addColumn('checkbox', function ($row) {
                    return '<input type="checkbox" class="column_checkbox career_checkbox" id="'.$row->id.'" name="career_checkbox[]" />';
                })
                ->addColumn('created_at', function ($row) {
                    return $row->created_at;
                })
                ->addColumn('commission', function ($row) {
                    return $row->exam_commission->name;
                })
                ->addColumn('status', function ($row) {
                    if($row->status == 1)
                    {
                        $status = '<span class="badge badge-success">Active</span>';
                    }
                    else{
                        $status = '<span class="badge badge-secondary">Inactive</span>';
                    }
                    return $status;
                })
                ->addColumn('action', function ($row) {
                    $editUrl = route('upcoming.exam.edit',$row->id);
                  $actionBtn = ' <a href="'.$editUrl.'" class="btn btn-sm btn-primary" title="Edit"><i class="fa fa-file"></i></a>
                            <form action="'.route('upcoming.exam.delete', $row->id).'" method="POST" style="display:inline">
                                '.csrf_field().'
                                '.method_field("DELETE").'
                                <button type="submit" class="btn btn-sm btn-danger" title="Delete"><i class="fa fa-trash"></i></button>
                            </form>';
                  return $actionBtn;
                })
                ->rawColumns(['checkbox', 'created_at', 'commission', 'status', 'action'])
                ->make(true);
            }
            return view('upcoming-exams.index');
    }

    public function upcomingExamCreate(){
        $data['commissions'] = ExaminationCommission::get();
        return view('upcoming-exams.create',$data);
    }
    
    public function upcomingExamEdit($id){
        $data['exam'] = UpcomingExam::findOrFail($id);
        $data['commissions'] = ExaminationCommission::get();
        return view('upcoming-exams.edit',$data);
    }
    
    public function upcomingExamUpdate($id,Request $request){
        $exam = UpcomingExam::findOrFail($id);

        // Update the exam attributes with new data
        $exam->commission_id = $request->input('commission_id');
        $exam->examination_name = $request->input('examination_name');
        $exam->advertisement_date = $request->input('advertisement_date');
        $exam->form_distribution_date = $request->input('form_distribution_date');
        $exam->submission_last_date = $request->input('submission_last_date');
        $exam->examination_date = $request->input('examination_date');
        $exam->link = $request->input('link');

        // Handle file upload if a new PDF is uploaded
        if ($request->hasFile('pdf')) {
            $pdfPath = $request->file('pdf')->store('pdfs', 'public');
            $exam->pdf = $pdfPath;
        }

        // Save the updated exam record
        $exam->save();

        // Redirect to the index page with a success message
        return redirect()->route('upcoming.exam.index')->with('success', 'Exam updated successfully.');
    }

    public function upcomingExamStore(Request $request){
        $request->validate([
            'commission_id' => 'required',
            'examination_name' => 'required|string|max:255',
            'advertisement_date' => 'required|date',
            'form_distribution_date' => 'required|date',
            'submission_last_date' => 'required|date',
            'examination_date' => 'required|date',
            'link' => 'nullable|url',
            'pdf' => 'nullable|file|mimes:pdf|max:2048',
        ]);

        $data = $request->all();

        if ($request->hasFile('pdf')) {
            $data['pdf'] = $request->file('pdf')->store('examinations');
        }

        UpcomingExam::create($data);

        return redirect()->back()->with('success','Upcoming created successfully.');
    }

    public function upcomingExamDelete($id){
        $exam = UpcomingExam::findOrFail($id);
        $exam->delete();
        return redirect()->back()->with('success','Upcoming Exam deleted successfully.');
    }

    public function questionBankIndex(){
        $data['questionBanks'] = Question::where('status', '=', 'Done')->get();
        return view('question-bank.index',$data);
    }

    public function rejectQuestionBankIndex(){
        $data['questionBanks'] = Question::where('status', '=', 'Rejected')->get();
        return view('question-bank.rejected',$data);
    }

    public function questionBankCreate(){
        $data['commissions'] = ExaminationCommission::get();
        $data['subjects'] = [];
        $data['topics'] = [];
        $data['categories'] = [];
        return view('question-bank.create',$data);
    }

    public function questionBankEdit($id){
       $question = Question::where('id',$id)->first();
        $data['commissions'] = ExaminationCommission::get();
        $data['subjects'] = Subject::get();
        $data['subcategories'] = Category::all();
        $data['topics'] = CourseTopic::get();
        $data['categories'] = Category::get();
        $data['question'] = $question;
        $data['chapters'] = Chapter::all();
        $data['topics'] = CourseTopic::get();
        return view('question-bank.edit',$data);
    }

    public function questionBankBulkUpload(){
        $data['commissions'] = ExaminationCommission::get();
        $data['subjects'] = [];
        $data['topics'] = [];
        $data['categories'] = [];
        return view('question-bank.bulk-upload',$data);
    }

    public function questionBankStore(Request $request){
        //dd($request->all());
        $validatedData = $request->validate([
            'language' => 'required',
            'question_type' => 'required',
            'commission_id' => 'required',
            'previous_year' => 'nullable|integer',
            'category_id' => 'required',
            'sub_category_id' => 'nullable',
            'subject_id' => 'required',
            'chapter_id' => 'nullable',
            'topic' => 'nullable',
            'has_instruction' => 'nullable',
            'instruction' => 'nullable',
            'has_option_e' => 'nullable',
            'question.*' => 'required|string',
            'answer.*' => 'required|string',
            'option_a.*' => 'required|string',
            'option_b.*' => 'required|string',
            'option_c.*' => 'required|string',
            'option_d.*' => 'required|string',
            'option_e.*' => 'nullable|string',
        ]);
    
        // Create a new instance of QuestionBank model
        // $questionBank = new QuestionBank();
    
        // // Assign values to the model properties
        // $questionBank->language = $request->language;
        // $questionBank->question_type = $request->question_type;
        // $questionBank->commission_id = $request->commission_id;
        // $questionBank->previous_year = $request->previous_year;
        // $questionBank->category_id = $request->category_id;
        // $questionBank->sub_category_id = $request->sub_category_id;
        // $questionBank->chapter_id = $request->chapter_id;
        // $questionBank->subject_id = $request->subject_id;
        // $questionBank->topic = $request->topic;
        // $questionBank->has_instruction = $request->has_instruction ? true : false;
        // $questionBank->instruction = $request->has_instruction ? $request->instruction : null;
        // $questionBank->has_option_e = $request->has_option_e ? true : false;
    
        // // Save the question bank to the database
        // $questionBank->save();
    
        // Process and save each question associated with this question bank
        foreach ($request->question as $key => $questionData) {
            // QuestionBank::where('id',$questionBank->id)->update(['question' => $questionData]);
            // Create a new instance of Question model
            $question = new Question();
    
            // Assign values to the model properties
            $question->language = $request->language;
            $question->question_type = $request->question_type;
            $question->commission_id = $request->commission_id;
            $question->previous_year = $request->previous_year;
            $question->category_id = $request->category_id;
            $question->sub_category_id = $request->sub_category_id;
            $question->chapter_id = $request->chapter_id;
            $question->subject_id = $request->subject_id;
            $question->topic = $request->topic;
            $question->has_instruction = $request->has_instruction ? true : false;
            $question->instruction = $request->has_instruction ? $request->instruction : null;
            $question->has_option_e = $request->has_option_e ? true : false;
            $question->show_on_pyq = $request->show_on_pyq == "yes" ? "yes" : "no";
            // $question->question_bank_id = $questionBank->id; // Assign the question bank ID
            $question->question = $questionData;
            $question->answer = $request->answer[$key];
            $question->option_a = $request->option_a[$key];
            $question->option_b = $request->option_b[$key];
            $question->option_c = $request->option_c[$key];
            $question->option_d = $request->option_d[$key];
            $question->option_e = $request->has_option_e ? $request->option_e[$key] ?? null : null;
    
            // Save the question to the database
            $question->save();
            // QuestionBank::where('id', $questionBank->id)->update(['question' => $questionData]);
        }
    
        // Optionally, you can redirect the user after successful submission
        return redirect()->route('question.bank.index')->with('success', 'Questions created successfully.');
    }

    public function questionBankUpdate(Request $request,$id){
        //dd($request->all());
        $validatedData = $request->validate([
            'language' => 'required',
            'question_type' => 'required',
            'commission_id' => 'required',
            'previous_year' => 'nullable|integer',
            'category_id' => 'required',
            'sub_category_id' => 'nullable',
            'subject_id' => 'required',
            'chapter_id' => 'nullable',
            'topic' => 'nullable',
            'has_instruction' => 'nullable',
            'instruction' => 'nullable',
            'has_option_e' => 'nullable',
            'question.*' => 'required|string',
            'answer.*' => 'required|string',
            'option_a.*' => 'required|string',
            'option_b.*' => 'required|string',
            'option_c.*' => 'required|string',
            'option_d.*' => 'required|string',
            'option_e.*' => 'nullable|string',
        ]);
    
        // Create a new instance of QuestionBank model
        // $questionBank = new QuestionBank();
    
        // // Assign values to the model properties
        // $questionBank->language = $request->language;
        // $questionBank->question_type = $request->question_type;
        // $questionBank->commission_id = $request->commission_id;
        // $questionBank->previous_year = $request->previous_year;
        // $questionBank->category_id = $request->category_id;
        // $questionBank->sub_category_id = $request->sub_category_id;
        // $questionBank->chapter_id = $request->chapter_id;
        // $questionBank->subject_id = $request->subject_id;
        // $questionBank->topic = $request->topic;
        // $questionBank->has_instruction = $request->has_instruction ? true : false;
        // $questionBank->instruction = $request->has_instruction ? $request->instruction : null;
        // $questionBank->has_option_e = $request->has_option_e ? true : false;
    
        // // Save the question bank to the database
        // $questionBank->save();
    
        // Process and save each question associated with this question bank
        foreach ($request->question as $key => $questionData) {
            // QuestionBank::where('id',$questionBank->id)->update(['question' => $questionData]);
            // Create a new instance of Question model
            $question =  Question::find($id);
    
            // Assign values to the model properties
            $question->language = $request->language;
            $question->question_type = $request->question_type;
            $question->commission_id = $request->commission_id;
            $question->previous_year = $request->previous_year;
            $question->category_id = $request->category_id;
            $question->sub_category_id = $request->sub_category_id;
            $question->chapter_id = $request->chapter_id;
            $question->subject_id = $request->subject_id;
            $question->topic = $request->topic;
            $question->has_instruction = $request->has_instruction ? true : false;
            $question->instruction = $request->has_instruction ? $request->instruction : null;
            $question->has_option_e = $request->has_option_e ? true : false;
             $question->show_on_pyq = $request->show_on_pyq == "yes" ? "yes" : "no";
            // $question->question_bank_id = $questionBank->id; // Assign the question bank ID
            $question->question = $questionData;
            $question->answer = $request->answer[$key];
            $question->option_a = $request->option_a[$key];
            $question->option_b = $request->option_b[$key];
            $question->option_c = $request->option_c[$key];
            $question->option_d = $request->option_d[$key];
            $question->option_e = $request->has_option_e ? $request->option_e[$key] ?? null : null;
    
            // Save the question to the database
            $question->save();
            // QuestionBank::where('id', $questionBank->id)->update(['question' => $questionData]);
        }
    
        // Optionally, you can redirect the user after successful submission
        return redirect()->route('question.bank.index')->with('success', 'Questions updated successfully.');
    }

    public function ImportQuestions(Request $request){
        //dd($request->all());
        $validatedData = $request->validate([
            'language' => 'required',
            'question_type' => 'required',
            'commission_id' => 'required',
            'previous_year' => 'nullable|integer',
            'category_id' => 'required',
            'subject_id' => 'nullable',
            'topic' => 'nullable',
            
            'file'=>'required|mimes:docx,xlsx',
        ]);

        // Create a new instance of QuestionBank model
        // $questionBank = new QuestionBank();
                    
        // // Assign values to the model properties
        // $questionBank->language = $request->language;
        // $questionBank->question_type = $request->question_type;
        // $questionBank->commission_id = $request->commission_id;
        // $questionBank->previous_year = $request->previous_year;
        // $questionBank->category_id = $request->category_id;
        // $questionBank->sub_category_id = $request->sub_category_id;
        // $questionBank->chapter_id = $request->chapter_id;
        // $questionBank->subject_id = $request->subject_id;
        // $questionBank->topic = $request->topic;
        
    
        
        try {
            $questionData = array();
            if ($request->file->getClientOriginalExtension()=='docx') {
                $filename=$request->file;
                $time=microtime();
                $phpWord = \PhpOffice\PhpWord\IOFactory::load($filename);
                $htmlWriter = \PhpOffice\PhpWord\IOFactory::createWriter($phpWord, 'HTML');
                $htmlWriter->save(storage_path($time.'.html'));
                $dom = new Dom;
                $dom->loadFromFile(storage_path($time.'.html'));
                $tables = $dom->find('table');
                     $successCount = 0;
                     $pendingCount = 0;
                     $rejectedCount = 0;
                     $successdata = [];
                     $pendingdata = [];
                     $rejecteddata = [];
                    for($i=0;$i<count($tables);$i++) {
                        try{
                        $question = $tables[$i]->find('tr',0)->find('td',1)->innerHtml;
                        if ($tables[$i]->find('tr',1)->find('td',1)->find('p')->innerHtml=='&nbsp;') {
                            $option_a = Null;
                        } else {
                            $option_a = $tables[$i]->find('tr',1)->find('td',1)->find('p')->innerHtml;
                        }
                        if ($tables[$i]->find('tr',2)->find('td',1)->find('p')->innerHtml=='&nbsp;') {
                            $option_b = Null;
                        } else {
                            $option_b = $tables[$i]->find('tr',2)->find('td',1)->find('p')->innerHtml;
                        }
                        if ($tables[$i]->find('tr',3)->find('td',1)->find('p')->innerHtml=='&nbsp;') {
                            $option_c = Null;
                        } else {
                            $option_c=$tables[$i]->find('tr',3)->find('td',1)->find('p')->innerHtml;
                        }
                        if ($tables[$i]->find('tr',4)->find('td',1)->find('p')->innerHtml=='&nbsp;') {
                            $option_d = Null;
                        } else {
                            $option_d = $tables[$i]->find('tr',4)->find('td',1)->find('p')->innerHtml;
                        }
                        if ($tables[$i]->find('tr',5)->find('td',1)->find('p')->innerHtml=='&nbsp;') {
                            $option_e = Null;
                            $has_option_e = false;
                        } else {
                            $option_e = $tables[$i]->find('tr',5)->find('td',1)->find('p')->innerHtml;
                            $has_option_e = true;
                        }
                        
                        if ($tables[$i]->find('tr',6)->find('td',1)->find('p')->innerHtml=='&nbsp;') {
                            $answer = Null;
                        } else {
                            $answer = $tables[$i]->find('tr',6)->find('td',1)->find('p')->find('span')->innerHtml;
                        }
                        
                        if ($tables[$i]->find('tr',7)->find('td',1)->find('p')->innerHtml=='&nbsp;') {
                            $instruction = Null;
                            $has_instruction = false;
                        } else {
                            $instruction = $tables[$i]->find('tr',7)->find('td',1)->innerHtml;
                            $has_instruction = true;
                        }

                        // $que =   QuestionBank::where('question',$question)
                        // // ->where('question_type',$request->question_type)
                        // // ->where('commission_id',$request->commission_id)
                        // // ->where('category_id',$request->category_id)
                        //  ->where('subject_id',$request->subject_id)
                        // ->where('topic',$request->topic);
                        
                        // $que = $que->first();

                        // Create a new instance of QuestionBank model
                        // $questionBank = new QuestionBank();
                                    
                        // // Assign values to the model properties
                        // $questionBank->language = $request->language;
                        // $questionBank->question_type = $request->question_type;
                        // $questionBank->commission_id = $request->commission_id;
                        // $questionBank->previous_year = $request->previous_year;
                        // $questionBank->category_id = $request->category_id;
                        // $questionBank->subject_id = $request->subject_id;
                        // $questionBank->topic = $request->topic;
                        // $questionBank->has_instruction = $has_instruction;
                        // $questionBank->instruction = $instruction;
                        // $questionBank->has_option_e = $has_option_e;
                        // $questionBank->question = $question;
                        // // Save the question bank to the database
                        // $questionBank->save();
    

            
                        $questionData['language'] = $request->language;
                        $questionData['question_type'] = $request->question_type;
                        $questionData['commission_id'] = $request->commission_id;
                        $questionData['previous_year'] = $request->previous_year;
                        $questionData['category_id'] = $request->category_id;
                        $questionData['sub_category_id'] = $request->sub_category_id;
                        $questionData['chapter_id'] = $request->chapter_id;
                        $questionData['subject_id'] = $request->subject_id;
                        $questionData['topic'] = $request->topic;
                        //$questionData['question_bank_id'] = $questionBank->id ?? 0;
                        $questionData['question'] = $question;
                        $questionData['option_a'] = $option_a;
                        $questionData['option_b'] = $option_b;
                        $questionData['option_c'] = $option_c;
                        $questionData['option_d'] = $option_d;
                        $questionData['option_e'] = $option_e;
                        $questionData['answer'] = strtoupper(Str::of($answer)->trim());
                        
                        
                        
                        if($que){
                            
                            $rejectedCount =  $rejectedCount+ 1;
                            $questionData['status'] = "Rejected";
                            $questionData['note'] = "Already Exists Question.";
                            $qsave = Question::create($questionData);
                            
                        }else{
                            
                          $insert =  Question::create($questionData);
                          if($insert){
                              $successCount = $successCount + 1;
                            $successdata[] = $questionData;
                          }
                            
                        }
                        }catch(\Exception $ex){
                            $question = $tables[$i]->find('tr',0)->find('td',1)->innerHtml;
                            $rejectedCount =  $rejectedCount+ 1;
                            $questionData['status'] = "Rejected";
                            $questionData['question'] = $question;
                            $questionData['note'] = 'Question Format Issue';
                            Question::create($questionData);
                            $rejecteddata[] = $questionData;
                        }
                        
                    }
                
                DB::commit();
                return redirect()->route('question.bank.index')->with('success', 'Questions created successfully.');
                // session(['success_data' => $successdata]);
                // session(['pending_data' => $pendingdata]);
                // session(['rejected_data' => $rejecteddata]);
                // return response()->json([
                //     'success' => true,
                //     'successCount' => $successCount,
                //     'rejectedCount' => $rejectedCount,
                //     'pendingCount' => count($tables) - $successCount - $rejectedCount - 1,
                //     'msgText' => 'Upload Successfull',
                // ]);
                // return redirect(route('admin.upload-question','type='.$exam_type))->with('success','Upload Successfull');
            } else {
                $import = new QuestionsImport($request->all());
                
                $import->import($request->file);
               // dd($import);
                $file = $request->file('file');
                
                $successCount = $import->getSuccessCount();
                $rejectedCount = $import->getRejectedCount();
                $pendingCount = $import->getRowCount() - $successCount - $rejectedCount;
                DB::commit();
                // return response()->json([
                //     'success' => true,
                //     'successCount' => $successCount,
                //     'rejectedCount' => $rejectedCount,
                //     'pendingCount' => $pendingCount,
                //     'msgText' => 'Question Updated Successfully',
                // ]);
                return redirect()->route('question.bank.index')->with('success', 'Questions created successfully.');
                // return redirect(route('admin.upload-question','type='.$exam_type))->with('success','Upload Successfull');
            }
        } catch(\Exception $ex) {
            //dd($ex);
            DB::rollback();
            return redirect()->route('question.bank.bulk-upload')->with('success', 'Something went wrong.');
        }
        
    
    }
    
    public function questionBankDelete($id){
        //  $question = QuestionBank::findOrFail($id);
        //  if($question)
        //  {
            $que = Question::where('id', $id)->first();
            $que->delete();
        //  }
        // $question->delete();
        return redirect()->back()->with('success','Question Bank deleted successfully.');
    }
    

    public function batchesProgrammeIndex(){
        $data['batches'] = BatchProgramme::all();
        return view('batches-programme.index',$data);
    }

    public function batchesProgrammeCreate(){
        return view('batches-programme.create');
    }

    public function batchesProgrammeStore(Request $request){
        $validatedData = $request->validate([
            'name' => 'required|string|max:255',
            'duration' => 'required|string|max:255',
            'start_date' => 'required|date',
            'mrp' => 'required|numeric',
            'discount' => 'nullable|integer',
            'offered_price' => 'required|numeric',
            'batch_heading' => 'required|string|max:255',
            'short_description' => 'required|string',
            'batch_overview' => 'required|string',
            'detail_content' => 'required|string',
            'thumbnail_image' => 'required|image|mimes:jpeg,png,jpg,gif,svg,webp|max:2048',
            'banner_image' => 'required|image|mimes:jpeg,png,jpg,gif,svg,webp|max:2048',
            'youtube_url' => 'nullable|string|max:255',
            'meta_title' => 'nullable|string|max:255',
            'meta_keyword' => 'nullable|string|max:255',
            'meta_description' => 'nullable|string|max:255',
            'image_alt_tag' => 'nullable|string|max:255',
        ]);

        // Handle file uploads
        if ($request->hasFile('thumbnail_image')) {
            $thumbnailPath = $request->file('thumbnail_image')->store('uploads/thumbnails','public');
            $validatedData['thumbnail_image'] = $thumbnailPath;
        }

        if ($request->hasFile('banner_image')) {
            $bannerPath = $request->file('banner_image')->store('uploads/banners','public');
            $validatedData['banner_image'] = $bannerPath;
        }

        // Create a new BatchAndProgramme instance and save the data
        BatchProgramme::create($validatedData);

        // Redirect back with a success message
        return redirect()->route('batches-programme.index')->with('success', 'Batch and Programme created successfully!');
    }

    public function batchesProgrammeDelete($id){
        $batch = BatchProgramme::findOrFail($id);
        $batch->delete();
        return redirect()->back()->with('success', 'Batch and Programme deleted successfully!');
    }

    public function headerSettingsIndex(){
        $data['settings'] = HeaderSetting::first();
        return view('admin-settings.header',$data);
    }

    public function headerSettingsStore(Request $request){
        $request->validate([
            'script' => 'nullable|string',
            'twitter_card' => 'nullable|string',
            'og_tags' => 'nullable|string',
            'meta_title' => 'nullable|string',
            'meta_keywords' => 'nullable|string',
            'meta_description' => 'nullable|string',
            'canonical_url' => 'nullable|string',
            'company_logo' => 'nullable|image',
            'contact_number' => 'nullable|string',
            'email_id' => 'nullable|email',
            'whatsapp_number' => 'nullable|string',
            'address' => 'nullable|string',
            'map_embbed' => 'nullable',
        ]);

        $data = $request->all();
        if ($request->hasFile('company_logo')) {
            $data['company_logo'] = $request->file('company_logo')->store('uploads', 'public');
        }

        HeaderSetting::updateOrCreate(['id' => 1], $data);

        return redirect()->back()->with('success', 'Settings updated successfully');
    }

    public function socialMediaIndex(){
        $data['settings'] = SocialMedia::first(); 
        return view('admin-settings.social-media',$data);
    }
    
    public function socialMediaStore(Request $request)
    {
        $validatedData = $request->validate([
            'youtube' => 'nullable|string',
            'facebook' => 'nullable|string',
            'instagram' => 'nullable|string',
            'linkdin' => 'nullable|string',
            'twitter' => 'nullable|string',
            'whatsapp' => 'nullable|string',
        ]);

        SocialMedia::updateOrCreate(['id' => 1], $validatedData);

        return redirect()->back()->with('success', 'Social media settings updated successfully!');
    }
    
    public function feedIndex(){
        $data['feeds'] = FeedTestimonial::where('type', 1)->get();
        return view('enquiries.feedback',$data);
    }

    public function testimonialsIndex(){
        $data['feeds'] = FeedTestimonial::where('type', 2)->get();
        return view('enquiries.testimonial',$data);
    }

    public function testimonialView($id){
        $data['testimonial'] = FeedTestimonial::where('type', 2)->where('id', $id)->first();
        return view('enquiries.testimonial-view',$data);
    }

   public function feedDelete($id){
       $feeds = FeedTestimonial::find($id);
       $feeds->delete();
       return redirect()->back()->with('success', 'Record deleted successfully!');
   }
   
    public function updateFeedStatus(Request $request, $id)
    {
        $feed = FeedTestimonial::findOrFail($id);
        $feed->status = $request->input('status');
        $feed->save();

        return redirect()->back()->with('success', 'Status updated successfully');
    }

    public function updateapproveStatus(Request $request, $id)
    {
        $feed = FeedTestimonial::findOrFail($id);
        $feed->is_approved = 1;
        $feed->save();

        return redirect()->back()->with('success', 'Approved successfully');
    }
    
    public function bannerSettingsIndex(){
        $data['banners'] = Banner::all();
        return view('admin-settings.banner',$data);
    }
    
    public function bannerSettingsEdit($id){
        $data['banner'] = Banner::findOrFail($id);
        return view('admin-settings.ajax.edit-banner',$data);
    }
    
    public function bannerSettingsUpdate(Request $request){
        $banner = Banner::findOrFail($request->id);
        $banner->position = $request->position;
        $banner->name = $request->name;
        $banner->link = $request->link;
    
        // Handle the file upload
        if ($request->hasFile('image')) {
            // Delete the old image if exists
            if ($banner->image) {
                Storage::delete('public/' . $banner->image);
            }
    
            // Store the new image
            $imagePath = $request->file('image')->store('front-banners', 'public');
            $banner->image = $imagePath;
        }
    
        // Save the updates
        $banner->save();
    
        // Redirect back with a success message
        return redirect()->route('settings.banner.index')->with('success', 'Banner updated successfully!');
    }

    public function bannerSettingsStore(Request $request){
        $validated = $request->validate([
            'image' => 'required|image|max:204800', // 200KB max
            'position' => 'required|integer|min:1|max:10',
            'name' => 'required|string|max:255',
            'link' => 'nullable|url|max:255',
        ]);

        // Handle the image upload
        if ($request->hasFile('image')) {
            $imagePath = $request->image->store('front-banners', 'public');
        }

        // Create a new banner
        $banner = new Banner();
        $banner->image = $imagePath;
        $banner->position = $request->input('position');
        $banner->name = $request->input('name');
        $banner->link = $request->input('link', '');
        $banner->save();

        return redirect()->route('settings.banner.index')->with('success', 'Banner added successfully.');
    }

    public function bannerSettingsDelete($id){
        $banner = Banner::findOrFail($id);
        $banner->delete();
        return redirect()->route('settings.banner.index')->with('success', 'Banner deleted successfully.');
    }

    public function programmeSettingsIndex(){
        $data['programmeFeature'] = ProgrammeFeature::first();
        return view('admin-settings.programme-feature',$data);
    }

    public function programmeSettingsStore(Request $request){

        $programmeFeature = ProgrammeFeature::firstOrNew();

        if ($request->hasFile('banner')) {
            $programmeFeature->banner = $request->banner->store('uploads', 'public');
        }

        $programmeFeature->title = $request->title;
        $programmeFeature->short_description = $request->short_description;
        $programmeFeature->heading = $request->heading;
        $programmeFeature->feature = $request->feature;

        if ($request->hasFile('icon1')) {
            $programmeFeature->icon1 = $request->icon1->store('uploads', 'public');
        }

        if ($request->hasFile('icon2')) {
            $programmeFeature->icon2 = $request->icon2->store('uploads', 'public');
        }

        if ($request->hasFile('icon3')) {
            $programmeFeature->icon3 = $request->icon3->store('uploads', 'public');
        }

        if ($request->hasFile('icon4')) {
            $programmeFeature->icon4 = $request->icon4->store('uploads', 'public');
        }

        $programmeFeature->icon_title1 = $request->icon_title1;
        $programmeFeature->icon_title2 = $request->icon_title2;
        $programmeFeature->icon_title3 = $request->icon_title3;
        $programmeFeature->icon_title4 = $request->icon_title4;

        $programmeFeature->save();

        return redirect()->route('settings.programme_feature.index')->with('success', 'Programme Feature created successfully.');
    }

    public function marqueeSettingsIndex(){
        $data['marquees'] = Marquee::all();
        return view('admin-settings.marquee',$data);
    }

    public function marqueeSettingsStore(Request $request){
        $request->validate([
            'title' => 'required|string|max:255',
            'link' => 'required|string|max:255',
        ]);

        $data = $request->only([
            'title',
            'link',
        ]);

        Marquee::create($data);

        return redirect()->route('settings.marquee.index')->with('success', 'Marquee created successfully.');
    }

    public function marqueeSettingsDelete($id){
        $marquee = Marquee::findOrFail($id);
        $marquee->delete();

        return redirect()->route('settings.marquee.index')->with('success', 'Marquee deleted successfully.');
    }
    
    public function marqueeSettingsEdit($id){
        $data['marquee'] = Marquee::findOrFail($id);
        return view('admin-settings.ajax.edit-marquee',$data);
    }
    
    public function marqueeSettingsUpdate(Request $request){
        $marquee = Marquee::findOrFail($request->id);
        $marquee->title = $request->title;
        $marquee->link = $request->link;
        $marquee->save();
        return redirect()->route('settings.marquee.index')->with('success', 'Marquee updated successfully.');
    }

    public function popSettingsIndex(){
        $data['popUp'] = PopUp::first();
        return view('admin-settings.pop-up',$data);
    }

    public function popSettingsStore(Request $request){
        $pop = PopUp::firstOrNew();

        if ($request->hasFile('pop_image')) {
            $pop_image = $request->file('pop_image')->store('uploads', 'public');
        }
        $pop->pop_image = $pop_image;
        $pop->title = $request->title;
        $pop->link = $request->link;
        $pop->save();

        return redirect()->back()->with('success', 'PopUp created successfully.');
    }

    public function featureSettingsIndex(){
        $data['feature'] = Feature::first();
        return view('admin-settings.feature',$data);
    }

    public function featureSettingsStore(Request $request){
        $feature = Feature::firstOrNew();

        // Assign the request data to the model attributes
        $feature->heading = $request->input('heading');
        $feature->title1 = $request->input('title1');
        $feature->title2 = $request->input('title2');
        $feature->title3 = $request->input('title3');
        $feature->short_description1 = $request->input('short_description1');
        $feature->short_description2 = $request->input('short_description2');
        $feature->short_description3 = $request->input('short_description3');

        // Handle image upload for icon1
        if ($request->hasFile('icon1')) {
            $icon1Path = $request->file('icon1')->store('uploads', 'public');
            $feature->icon1 = $icon1Path;
        }

        // Handle image upload for icon2
        if ($request->hasFile('icon2')) {
            $icon2Path = $request->file('icon2')->store('uploads', 'public');
            $feature->icon2 = $icon2Path;
        }

        // Handle image upload for icon3
        if ($request->hasFile('icon3')) {
            $icon3Path = $request->file('icon3')->store('uploads', 'public');
            $feature->icon3 = $icon3Path;
        }

        // Save the feature
        $feature->save();

        // Redirect back with success message
        return redirect()->back()->with('success', 'Feature updated successfully!');
    }
    
    public function getCategories($id){
        $categories = Category::where('exam_com_id', $id)->get();
        return response()->json(['categories' => $categories]);
    }
    
    public function getSubCategories($id){
        $subcategories = SubCategory::where('category_id', $id)->get();
        return response()->json(['subcategories' => $subcategories]);
    }
    
    public function pyqContentIndex(){
        $data['pyqContents'] = PyqContent::with('examinationCommission','category','subCategory')->orderBy('created_at','DESC')->get();
        return view('pyq.pyq-content-index',$data);
    }
    
    public function pyqContentCreate(){
        $data['commissions'] = ExaminationCommission::all();
        return view('pyq.pyq-content-create',$data);
    }
    
    public function pyqContentEdit($id){
        $data['pyqContent'] = PyqContent::findOrFail($id);
        $data['commissions'] = ExaminationCommission::all();
        $data['categories'] = Category::where('exam_com_id',$data['pyqContent']->commission_id)->get();
        $data['subCategories'] = SubCategory::where('category_id',$data['pyqContent']->category_id)->get();
        $data['subjects'] = Subject::where('sub_category_id',$data['pyqContent']->sub_category_id)->get();
        return view('pyq.pyq-content-edit',$data);
    }
    
    public function pyqContentStore(Request $request){
        $request->validate([
            'commission_id' => 'required',
            'category_id' => 'required',
            'subject_id'  =>  'required',
            'sub_category_id' => 'required',
            'heading' => 'required|string|max:255',
            'detail_content' => 'required',
        ]);

        // Create a new PyqContent
        $pyqContent = new PyqContent([
            'commission_id' => $request->input('commission_id'),
            'category_id' => $request->input('category_id'),
            'sub_category_id' => $request->input('sub_category_id'),
            'subject_id'  => $request->input('subject_id'),
            'heading' => $request->input('heading'),
            'detail_content' => $request->input('detail_content'),
        ]);

        // Save the PyqContent
        $pyqContent->save();

        // Redirect with success message
        return redirect()->route('pyq.content.index')->with('success', 'Content added successfully.');
    }
    
    public function pyqContentUpdate(Request $request,$id){
        $pyqContent = PyqContent::findOrFail($id);

        // Update the PyqContent with new data
        $pyqContent->update([
            'commission_id' => $request->commission_id,
            'category_id' => $request->category_id,
            'sub_category_id' => $request->sub_category_id,
            'heading' => $request->heading,
            'subject_id' => $request->subject_id ?? '',
            'detail_content' => $request->detail_content,
        ]);

        // Redirect to the index page with a success message
        return redirect()->route('pyq.content.index')->with('success', 'Pyq Content updated successfully.');
    }
    
    public function pyqContentDelete($id){
        $pyqContent = PyqContent::findOrFail($id);
        $pyqContent->delete();
        return redirect()->back()->with('success', 'Pyq content deleted successfully');
    }


    function careerBulkDelete(Request $request)
    {
        $career_id_array = $request->input('id');
        $career = Career::whereIn('id', $career_id_array);
        if($career->delete())
        {
            echo 'Records Deleted';
        }
    }
    function boosterBulkDelete(Request $request)
    {
        $booster_id_array = $request->input('id');
        $booster = DailyBooster::whereIn('id', $booster_id_array);
        if($booster->delete())
        {
            echo 'Records Deleted';
        }
    }

    function testPlannerBulkDelete(Request $request)
    {
        $test_id_array = $request->input('id');
        $test = TestPlanner::whereIn('id', $test_id_array);
        if($test->delete())
        {
            echo 'Records Deleted';
        }
    }
    function studyMaterialBulkDelete(Request $request)
    {
        $material_id_array = $request->input('id');
        $material = StudyMaterial::whereIn('id', $material_id_array);
        if($material->delete())
        {
            echo 'Records Deleted';
        }
    }
    function upcomingExamBulkDelete(Request $request)
    {
        $exam_id_array = $request->input('id');
        $exam = UpcomingExam::whereIn('id', $exam_id_array);
        if($exam->delete())
        {
            echo 'Records Deleted';
        }
    }
    function contactUsBulkDelete(Request $request)
    {
        $contact_id_array = $request->input('id');
        $contact = ContactUs::whereIn('id', $contact_id_array);
        if($contact->delete())
        {
            echo 'Records Deleted';
        }
    }
    function subjectBulkDelete(Request $request)
    {
        $subject_id_array = $request->input('id');
        $subject = Subject::whereIn('id', $subject_id_array);
        if($subject->delete())
        {
            echo 'Records Deleted';
        }
    }

    function categoryBulkDelete(Request $request)
    {
        $category_id_array = $request->input('id');
        $category = Category::whereIn('id', $category_id_array);
        if($category->delete())
        {
            echo 'Records Deleted';
        }
    }
    function chapterBulkDelete(Request $request)
    {
        $chapter_id_array = $request->input('id');
        $chapter = Chapter::whereIn('id', $chapter_id_array);
        if($chapter->delete())
        {
            echo 'Records Deleted';
        }
    }
    function subCatBulkDelete(Request $request)
    {
        $subcat_id_array = $request->input('id');
        $subcat = SubCategory::whereIn('id', $subcat_id_array);
        if($subcat->delete())
        {
            echo 'Records Deleted';
        }
    }

    function courseBulkDelete(Request $request)
    {
        $course_id_array = $request->input('id');
        $course = Course::whereIn('id', $course_id_array);
        if($course->delete())
        {
            echo 'Records Deleted';
        }
    }
}
